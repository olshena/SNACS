if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("edgeR")
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("limma")
library(limma)
library(edgeR)
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("edgeR")
library(edgeR)
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("edgeR")
library(edgeR)
?density
library(skmeans)
install.packages("skmeans","VIM")
install.packages("skmeans")
install.packages("VIM")
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("marray")
550000*.8
install.packages("readxl")
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("NanoStringQCPro")
install.packages("markdown")
install.packages("DescTools")
install.packages("pROC")
10000/80
160/24
1000/18
6*1000/18
?ecdf
5.6*80
2004+33
2004-1968
36
36+33
3754.76
3754.76/2
35/6
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("qvalue")
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("biomaRt")
library(biomaRt)
install.packages("coin")
673.270/8
16.250
16*12
16*12/8
2022-2004
84*16
84*8
16
16*12/8
2999/365
479/56
x1=as.Date("08/07/22","%m/%d/%y")#
paste0("Interval: ",x1+1," to ",x1+365)
2500*12
library(sva)
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("sva")
library(sva)
?ComBat_seq
load("/Users/royr/UCSF/canary/canary_20210811/results/20210805/rnaseq/data/datObj_canary.RData")
ls()
datObj1= datObjCan
load("/Users/royr/UCSF/canary/canary_20210811/results/20210805addl/rnaseq/data/datObj_canary.RData")
datObj2= datObjCan
dim(datObj1$cnt)
dim(datObj2$cnt)
table(colnames(datObj1$cnt)%in%colnames(datObj2$cnt))
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("clusterProfiler")
library(if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("clusterProfiler"))
library(clusterProfiler)
1101/78
x1=as.Date("08/13/22","%m/%d/%y")#
xRe=28#
paste0("Interval: ",x1," to ",x1+xRe)
27000-8000
27000-10000
17000+19000
(17000+19000)/4
100000/12
3500
2700+2700+500
1700+1700+500
384/8
16*12
384/192
16*12/8
597.8/4
687.45/4
824.32/5
load("/Users/royr/UCSF/heatmapProject/heatmap4/heatmap4/R/data.rda")
ls()
install.packages("BlandAltmanLeh")
library(ggplot2)#
    library(gridExtra)
library(BlandAltmanLeh)
library(dplyr)
## Kord Kober Fatique Omics project#
## Analysis of predictions#
#
## -------------------------------#
## Arguments#
## computerName = c("pnldev","test")#
## onePlotFlag. onePlotFlag=T means all figures are plotted in one pdf file#
## saveScratchData. Set saveScratchData=T to generate temporary files to make plots and tables#
#
## -------------------------------#
#
## -------------------------------#
## -------------------------------#
## Set parameters#
#
computerName="pnldev"#
computerName="test"#
#
fileNameSuffix="_iter16"#
fileNameSuffix="_iter18"#
#
saveScratchData=F#
saveScratchData=T#
#
respVarName="newafitott6"#
respVarNameShort="AFI TS T6"#
dataset=""#
#
respVarName="newafitott2"#
respVarNameShort="AFI TS T2"#
dataset=""#
#
respVarName="lfapt6"#
respVarNameShort="ELFS2 TS T6"#
dataset=""#
#
respVarName="lfaat6"#
respVarNameShort="MLFS2 TS T6"#
dataset=""#
#
respVarName="lfaat2"#
respVarNameShort="MLFS2 TS T2"#
dataset="_set1"#
dataset=""#
#
respVarName="lfapt2"#
respVarNameShort="ELFS2 TS T2"#
dataset=""#
#
predVarName="Clinical"#
predVarName="Assessable"#
#
fNameInSuffix="_seed1_1000"#
fNameInSuffix="_seed1"#
#
respType="_catResp"#
respType=""#
#
respVarVec=c("lfaat2","lfaat6","lfapt2","lfapt6","newafitott2","newafitott6")#
respVarVec=c("lfaat2")#
respVarVec=c("lfaat2","lfapt2")#
#
for (respVarName in respVarVec) {#
    cat("\n\n################ ",respVarName,respType,"\n",sep="")#
    switch(respVarName,#
        "newafitott6"={#
            respVarNameShort="AFI TS T6"#
        },#
        "newafitott2"={#
            respVarNameShort="AFI TS T2"#
        },#
        "lfapt6"={#
            respVarNameShort="ELFS2 TS T6"#
        },#
        "lfapt2"={#
            respVarNameShort="ELFS2 TS T2"#
        },#
        "lfaat6"={#
            respVarNameShort="MLFS2 TS T6"#
        },#
        "lfaat2"={#
            respVarNameShort="MLFS2 TS T2"#
        }#
    )#
## -------------------------------#
## -------------------------------#
#
if (computerName=="pnldev") {#
    setwd(paste0("/songlab/proj/cbi/fatigueOmics/prediction/",respVarName,"/",iteration))#
    dirWork=""#
    dirSource=paste("code/",sep="")#
    dirDataMtEpic="/songlab/proj/cbi/SCS_MtEpicArray_2021_n960/royR/process_scs_mtEpicArray/data/"#
} else {#
    if (respVarName%in%c("lfaat2","lfaat6","newafitott2","newafitott6")) {#
        setwd("/Users/royr/UCSF/koberK/fatigueOmics/")#
        dirWork="SCS_AmFatigue_predT1T2/"#
        dirSource=paste("code/",sep="")#
    } else {#
        setwd("/Users/royr/UCSF/koberK/ctx/")#
        dirWork="pmFat_predT1T2_pilot/"#
        dirSource=paste("../fatigueOmics/code/",sep="")#
    }#
    dirDataMtEpic="../scs_mtEpicArray/SCS_MtEpicArray_2021_n960/royR/process_scs_mtEpicArray/data/"#
}#
#
#suppressPackageStartupMessages()#
#
## -------------------------------#
## -------------------------------#
#
source(paste(dirSource,"functions.R",sep=""))#
#
scaleVarName=sub("2","1",respVarName)#
variablesNameLong=variablesNameShort=NULL#
#
## ----------------------------#
## Geno candidate genes#
filtFlag="_filtPV0.05"#
#
variablesVec="_geno_inflammation"#
iteration=20210113#
#
variablesVec="_geno_Wright2017Cytokine"#
iteration="Wright2017Cytokine"#
#
variablesVec=c("_geno_oxytocin","_geno_relaxin")#
iteration="oxytocin_relaxin"#
#
variablesVec=c("_geno_eQTLGen_trans")#
iteration="eQTL"#
## ----------------------------#
#
## Geno#
variablesVec="_geno"#
filtFlag="_filtPV0.0002"#
iteration=20201228#
iteration=20210106#
#
## Clinical#
variablesVec=paste0("_with",capWords(scaleVarName),"ScaleItems")#
variablesVec=c("_combined")#
variablesVec=""#
variablesVec=c("",paste0("_with",capWords(scaleVarName),"ScaleItems"))#
filtFlag="_filtPV0.05"#
iteration=20201110#
if (respVarName%in%c("lfaat2","lfaat6","newafitott2","newafitott6") & dataset=="") iteration=20210303 else iteration=20210127#
#
## Clinical + mtEpic#
iteration=20201110#
if (respVarName%in%c("lfaat2","lfaat6","newafitott2","newafitott6") & dataset=="") iteration=20210303 else iteration=20210127#
variablesVec=""#
variablesVec=paste0("",rep(paste0("_mtEpic_chr1to22",c("_pca","")),each=length(variablesVec)))#
variablesVec=paste0("",rep(paste0("_mtEpicOnly_chr1to22",c("")),each=length(variablesVec)))#
variablesVec=paste0("",rep(paste0("_mtEpic_chr1to22",c("")),each=length(variablesVec)))#
variablesVec=paste0("",rep(paste0("_mtEpicOnly_chr1to22",c("_pcaN5")),each=length(variablesVec)))#
variablesVec=paste0("",rep(paste0("_mtEpic_chr1to22",c("_pcaN5")),each=length(variablesVec)))#
variablesVec=paste0("",rep(paste0("_mtEpic_chr1to22",c("_pcaN1")),each=length(variablesVec)))#
variablesVec=""; iteration="clin_nRep10"#
variablesVec="_mtEpicSam_lfaat1"; iteration="clin_nRep10"#
variablesVec="_mtEpicSam_noLfaat1"; iteration="clin_nRep10"#
variablesVec="_mtEpicSam"; iteration="clin_nRep10"#
variablesVec="_assess_mtEpicSam"; iteration="clin_nRep10"#
variablesVec=c("_assess_mtEpicSam","_assess_leep5t1_mtEpicSam","_assess_leep12t1_mtEpicSam","_assess_leep5t1_leep12t1_mtEpicSam"); iteration="clin_nRep10"#
variablesVec=c("_assess_mtEpicSam","_assess_leep5t1_leep12t1_mtEpicSam"); iteration="clin_nRep3"#
variablesVec=c("_assess_geno_addModel","_assess_leep5t1_leep12t1_geno_addModel"); iteration="geno"#
variablesVec=c("_assess_geno_addModel"); iteration="geno"#
variablesVec=c("_assess_mtEpic_chr1to22_pcaN1","_assess_leep5t1_leep12t1_mtEpic_chr1to22_pcaN1"); iteration="mtEpic"#
variablesVec=c("_assess","_assess_leep5t1_leep12t1"); iteration="clin_nRep1000"#
filtFlag="_filtPV0.05"#
if (length(grep("_mtEpicSam",variablesVec))!=0) iteration="clin_nRep3"#
if (length(grep("_mtEpic",variablesVec))!=0) iteration="mtEpic_nRep3"#
if (length(grep("_mtEpic",variablesVec))!=0) iteration="mtEpic"#
if (length(grep("_mtEpicSam",variablesVec))!=0) iteration="clin_nRep10"#
variablesVec=c("_combined")#
#
## ----------------------------#
#
dataVersion=""#
dataVersion="_20200508"#
dataVersion="_20220320"#
#
onePlotFlag=T#
onePlotFlag=F#
#
outputFormat="pdf"#
outputFormat="png"#
#
drawLine=list(type="")#
drawLine=list(type="loess",span=.25)#
#
dispNoOfRepFlag=T#
dispNoOfRepFlag=F#
#
figNoFlag=T#
figNoFlag=F#
#
## -------------------------------#
## -------------------------------#
candGene=c("_geno_inflammation","_geno_Wright2017Cytokine","_geno_oxytocin","_geno_relaxin","_geno_eQTLGen","_geno_eQTLGen_cis","_geno_eQTLGen_trans")#
#candGene=paste0(c("","_withLfaat1ScaleItems"),rep(paste0("_mtEpic_chr1to22",c("_pca","")),each=2))#
#
for (variables in variablesVec) {#
    if (respVarName=="lfaat2") variables=gsub("leep","leea",variables)#
    cat("\n\n-------------- ",variables,"\n",sep="")#
#
    #if (dataVersion%in%c("_20200508","")) dirResult=paste0(dirWork,"royR/20201110/results/")#
    dirResult=paste0(dirWork,"royR/",iteration,"/results/")#
#
    addVariables=""#
    switch(respVarName,#
        "lfaat2"={#
            if (variables=="_withLfaat1ScaleItems") {#
                variablesNameLong="With time 2 morning fatigue scale items"#
                variablesNameShort="With MLFS Scale Items at T2"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 2 morning fatigue score"#
                variablesNameShort="With MLFS at T2"#
            }#
        },#
        "lfaat6"={#
            if (variables=="_withLfaat1ScaleItems") {#
                variablesNameLong="With time 6 morning fatigue scale items"#
                variablesNameShort="With MLFS Scale Items at T6"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 6 morning fatigue score"#
                variablesNameShort="With MLFS at T6"#
            }#
        },#
        "lfapt2"={#
            if (variables=="_withLfapt1ScaleItems") {#
                variablesNameLong="With time 2 evening fatigue scale items"#
                variablesNameShort="With ELFS Scale Items at T2"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 2 evening fatigue score"#
                variablesNameShort="With ELFS at T2"#
            }#
        },#
        "lfapt6"={#
            if (variables=="_withLfapt1ScaleItems") {#
                variablesNameLong="With time 6 evening fatigue scale items"#
                variablesNameShort="With ELFS Scale Items at T6"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 6 evening fatigue score"#
                variablesNameShort="With ELFS at T6"#
            }#
        },#
        "newafitott2"={#
            if (variables=="_withAfi1ScaleItems") {#
                variablesNameLong="With time 2 cognitive fatigue scale items"#
                variablesNameShort="With AFI Scale Items at T2"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 2 cognitive fatigue score"#
                variablesNameShort="With AFI at T2"#
            }#
        },#
        "newafitott6"={#
            if (variables=="_withAfi1ScaleItems") {#
                variablesNameLong="With time 6 cognitive fatigue scale items"#
                variablesNameShort="With AFI Scale Items at T6"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 6 cognitive fatigue score"#
                variablesNameShort="With AFI at T6"#
            }#
        }#
    )#
    varSub=strsplit(variables,"_")[[1]]; if (variables!="") varSub=varSub[varSub!=""]#
    if (any(c("leea5t1","leea12t1","leep5t1","leep12t1")%in%varSub) | length(grep("ScaleItem",variables))==1) {#
        addVariables="_withFatiqueScaleItems"#
    } else {#
        addVariables=""#
    }#
#
    if (F) {#
        predMethodVec=c()#
        predMethodVec=c("none_null","none_lm",paste0("none_lm",filtFlag),"none_rpart1se","none_neuralNet")#
        tmp=paste0("none_rf_mtry",c(2,3,4))#
        predMethodVec=c(predMethodVec,tmp)#
        param=data.frame(degree=1:3,scale=1,C=1)#
        tmp=paste0("none_svmPoly_degree",param$degree,"scale",param$scale,"C",param$C)#
        predMethodVec=c(predMethodVec,tmp)#
        param=data.frame(alpha=rep(1,3),lambda=c(0.0014,0.0137,0.1372))#
        tmp=paste0("none_lasso_alpha",param$alpha,"lambda",param$lambda)#
        predMethodVec=c(predMethodVec,tmp)#
        param=data.frame(alpha=rep(c(0.25,0.50,0.75),each=3),lambda=c(0.0014,0.0137,0.1372))#
        tmp=paste0("none_enet_alpha",param$alpha,"lambda",param$lambda)#
        predMethodVec=c(predMethodVec,tmp)#
#
        predMethodVec=c()#
        param=data.frame(alpha=rep(1,3),lambda=c(0.0014,0.0137,0.1372))#
        tmp=paste0("none_lasso_alpha",param$alpha,"lambda",param$lambda)#
        predMethodVec=c(predMethodVec,tmp)#
        param=data.frame(alpha=rep(c(0.25,0.50,0.75),each=3),lambda=c(0.0014,0.0137,0.1372))#
        tmp=paste0("none_enet_alpha",param$alpha,"lambda",param$lambda)#
        predMethodVec=c(predMethodVec,tmp)#
    }#
    predMethodVec=c("none_lm_univariate")#
    predMethodVec=c("none_null","none_lm",paste0("none_lm",filtFlag),"none_rpart1se","none_rf","none_svmPoly","none_lasso","none_enet","none_neuralNet")#
    predMethodVec=c(paste0("none_lm",filtFlag),"none_rpart1se","none_lasso","none_enet")#
    predMethodVec=c("none_null",paste0("none_lm",filtFlag),"none_rpart1se","none_lasso","none_enet")#
#
    #predMethodVec=paste0(predMethodVec,sub("_combined","",variables),dataset,dataVersion)#
    predMethodVec=paste0(predMethodVec,variables,dataset,dataVersion)#
    predMethodVec=sub(paste0(filtFlag,variables,dataset,dataVersion),paste0(variables,dataset,dataVersion,filtFlag),predMethodVec)#
    if (length(variablesVec)==1 & variablesVec[1]="_combined") predMethodVec=sub("_combined","_assess",predMethodVec)#
#
    #########################################################
    #########################################################
#
    if (onePlotFlag) {#
        switch(outputFormat,#
            "pdf"={#
                pdf(paste("predictionPerformance",variables,fileNameSuffix,".pdf",sep=""))#
            },#
            "png"={#
                png(paste("predictionPerformance",variables,fileNameSuffix,"_%1d.png",sep=""))#
            }#
        )#
    }#
#
    dirThis="scratch"#
    if (!file.exists(dirThis)) dir.create(file.path(dirThis))#
    dirScratch=paste(dirThis,"/",sep="")#
    rm(dirThis)#
#
    ## -------------------------------#
    ## -------------------------------#
#
    dirVarTotal=dirVarScaleItem="../fatigueOmics/SCS_AmFatigue_predT1T2/royR/data/"#
    dirDataTotal=dirDataScaleItem="../fatigueOmics/SCS_AmFatigue_predT1T2/royR/data/"#
    if (iteration%in%c("20210303")) {#
        dirVarTotal=dirVarScaleItem="../fatigueOmics/SCS_AmFatigue_predT1T2/royR/data/meanAndScaleItems/"#
        dirDataTotal=dirDataScaleItem="../fatigueOmics/SCS_AmFatigue_predT1T2/royR/data/meanAndScaleItems/"#
    }#
    if (F) {#
        if (respVarName%in%c("lfaat2","lfaat6","newafitott2","newafitott6")) {#
            dirVarTotal=paste(dirWork,"royR/data/",sep="")#
            dirVarScaleItem=paste(dirWork,"royR/data/",sep="")#
        } else {#
            dirVarTotal=paste(dirWork,"royR/20200115/data/",sep="")#
            dirVarScaleItem=paste(dirWork,"royR/20200228/data/",sep="")#
        }#
        if (dataVersion=="_20200508") {#
            if (respVarName%in%c("lfaat2","lfaat6","newafitott2","newafitott6")) {#
                dirDataTotal=dirDataScaleItem=paste(dirWork,"royR/data/",sep="")#
            } else {#
                dirDataTotal=dirDataScaleItem=paste(dirWork,"royR/20200518/data/",sep="")#
            }#
        } else if (dataVersion=="") {#
            dirDataTotal=paste(dirWork,"royR/20201028/data/",sep="")#
            dirDataScaleItem=paste(dirWork,"royR/20201028/data/",sep="")#
        }#
    }#
    if (length(grep("ScaleItems",variables))==1) {dirData=dirDataScaleItem} else {dirData=dirDataTotal}#
#
    if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
        load(paste0(dirData,"datGeno",dataset,".RData",sep=""))#
        ann2=read.table(paste0(dirData,"HumanExome-12v1-1_A_Gene_Annotation.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
        names(ann2)[match(c("Name","Chr","MapInfo","Alleles","Transcript.s.","Gene.s.","in.EXON","Mutation.s."),names(ann2))]=c("id","chr","pos","alleles","transcript","geneSym","inExom","mutation")#
        i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(ann2$chr,ann2$pos))#
        ann2=ann2[i,]#
        if (variables%in%c("_geno_inflammation")) {#
            tbl1=read.table(paste0(dirData,"candGene.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            i=which(toupper(ann2$geneSym)%in%toupper(tbl1$geneSym))#
            rm(tbl1)#
        } else if (variables%in%c("_geno_Wright2017Cytokine")) {#
            tbl1=read.table(paste0(dirData,"Wright2017Cytokine_assays.txt.assaysForGenes.coords_fromLiftOver_hg19.txt",sep=""), sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T)#
            tbl1=as.data.frame(t(sapply(tbl1[,1],function(x) {as.integer(strsplit(strsplit(sub("chr","",x),"-")[[1]][1],":")[[1]])},USE.NAMES=F)))#
            colnames(tbl1)=c("chr","pos")#
            i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$chr,tbl1$pos))#
            i=which(!is.na(i))#
            rm(tbl1)#
        } else if (variables%in%c("_geno_oxytocin","_geno_relaxin")) {#
            offset=22#
            fName=dir(dirData,pattern=paste0(sub("_geno","",variables),"_kegg"))#
            nm=read.table(paste0(dirData,fName,sep=""), sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T,nrow=1)#
            tbl1=read.table(paste0(dirData,fName,sep=""),sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T,skip=1)#
            nm=nm[1,1]#
            x=substr(tbl1[,1],offset,nchar(tbl1[,1]))#
            geneSym=c()#
            for (i in 1:length(x)) {#
                y=strsplit(x[i],";")[[1]][1]#
                geneSym=c(geneSym,strsplit(y,", ")[[1]])#
            }#
            #print(table(toupper(ann2$geneSym)%in%toupper(geneSym)))#
            i=which(toupper(ann2$geneSym)%in%toupper(geneSym))#
            rm(offset,fName,tbl1,geneSym)#
        } else if (variables%in%c("_geno_eQTLGen","_geno_eQTLGen_cis","_geno_eQTLGen_trans")) {#
            if (variables%in%c("_geno_eQTLGen_cis")) {#
                tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                i=which(!is.na(i))#
                rm(tbl1)#
            } else if (variables%in%c("_geno_eQTLGen_trans")) {#
                tbl1=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                i=which(!is.na(i))#
                rm(tbl1)#
            } else {#
                if (F) {#
                    tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    tbl2=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                    i1=which(!is.na(i))#
                    i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl2$SNPChr,tbl2$SNPPos))#
                    i2=which(!is.na(i))#
                    i=match(paste(datObj$ann$chr,datObj$ann$pos),c(paste(tbl1$SNPChr,tbl1$SNPPos),paste(tbl2$SNPChr,tbl2$SNPPos)))#
                    i12=which(!is.na(i))#
#
                    cat("\nNo. of loci: total ",nrow(datObj$ann)/2,", cis ",length(i1)/2," (",round(100*length(i1)/nrow(datObj$ann)),"%), trans ",length(i2)/2," (",round(100*length(i2)/nrow(datObj$ann)),"%), cis/trans ",length(i12)/2," (",round(100*length(i1)/nrow(datObj$ann)),"%)\n",sep="")#
                    '#
                    No. of loci: total 21525, cis 14542 (68%), trans 770 (4%), cis/trans 14652 (68%)#
                    '#
                }#
                tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                tbl2=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                tbl1=tbl1[,c("SNPChr","SNPPos")]#
                tbl2=tbl2[,c("SNPChr","SNPPos")]#
                tbl1=rbind(tbl1,tbl2)#
                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                i=which(!is.na(i))#
                rm(tbl2,tbl1)#
            }#
        } else {#
            i=1:ncol(datObj$geno)#
        }#
        training=cbind(datObj$phen[,respVarName],as.data.frame(datObj$geno[,i],stringsAsFactors=F),stringsAsFactors=F)#
        nm=c(respVarName,colnames(datObj$geno)[i])#
        names(training)=nm#
        rm(i,nm,datObj,ann2)#
    } else {#
        load(paste0(dirData,"training_",respVarName,addVariables,dataset,dataVersion,".RData"))#
        load(paste0(dirData,"ptid_",respVarName,dataset,".RData"))#
        rownames(training)=paste0("X",ptid); rm(ptid)#
        varSub=strsplit(variables,"_")[[1]]; if (variables!="") varSub=varSub[varSub!=""]#
        varList=c("leea5t1","leea12t1","leep5t1","leep12t1")#
        varList=varList[which(varList%in%varSub)]#
        if ("assess"%in%varSub) {#
            load(paste(dirData,"training_",respVarName,addVariables,dataset,dataVersion,".RData",sep=""))#
            load(paste0(dirData,"ptid_",respVarName,dataset,".RData"))#
            rownames(training)=paste0("X",ptid); rm(ptid)#
            varInfo1=data.frame(surrogate=names(training),variable=names(training),stringsAsFactors=F)#
            varInfo=read.table(paste0(dirData,"predictorList_withVariablesToExclude.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            x=c(respVarName,varList,varInfo$variable[which(varInfo$assessableStatus=="assessable")])#
            training=training[,which(varInfo1$variable%in%x)]#
        }#
        if (length(grep(paste0("_no",capWords(scaleVarName)),variables))==1) {#
            training=training[,which(names(training)!=scaleVarName)]#
        } else if (variables%in%paste0(c("_","_univariate_"),scaleVarName,"ScaleItems")) {#
            varInfo=read.table(paste(dirVarScaleItem,"scs.t1.scale.variable.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            varInfo=varInfo[which(varInfo$metaVariable=="Fatigue Scale Items"),]#
            training=training[,which(names(training)%in%c(respVarName,varInfo$variable))]#
            varInfo1=varInfo#
            rm(varInfo)#
        } else if (variables%in%c(paste0("_with",capWords(scaleVarName),"ScaleItems"))) {#
            varInfo=read.table(paste(dirVarScaleItem,"scs.t1.scale.variable.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            varInfo=varInfo[which(varInfo$metaVariable=="Fatigue Scale Items"),]#
            training=training[,which(!names(training)%in%c(scaleVarName))]#
            varInfo1=varInfo#
            rm(varInfo)#
        }#
        if ("geno"%in%varSub) {#
            if (length(grep("_geno_addModel",variables))==1) {#
                load(paste0(dirData,"datGeno_addModel_",respVarName,dataset,".RData",sep=""))#
            } else {#
                load(paste0(dirData,"datGeno_",respVarName,dataset,".RData",sep=""))#
            }#
            load(paste0(dirData,"ptid_",respVarName,dataset,".RData"))#
            j=match(ptid,datObj$phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
            datAssay=datObj$geno[j2,]#
            training=training[j1,]#
            training=cbind(training,datAssay,stringsAsFactors=F)#
            rm(datObj); rm(ptid,j,j1,j2)#
        } else if (length(grep("_mtEpic",variables))==1) {#
            varSub=NULL#
            mtEpicFlag=""#
            x=strsplit(variables,"_")[[1]]; k=which(x%in%c("mtEpic","mtEpicOnly"))#
            if (length(k)!=0) {#
                varSub=paste0("_",paste(x[k+(0:1)],collapse="_"))#
                if (length(x)>(k+1)) {#
                    if ("pca"%in%substr(x,1,nchar("pca"))) {mtEpicFlag="pca"; nPC=5#
                    } else if ("coMethDMR"%in%x) {mtEpicFlag="coMethDMR"}#
                }#
            } else if ("mtEpicSam"%in%x) {#
                varSub="mtEpicSam"#
            }#
#
            load(paste0(dirDataMtEpic,"m-values.rda"))#
            datAssay=M#
            rm(M)#
#
            load(paste0(dirDataMtEpic,"phen.MSet.raw.rda"))#
            phen=phen[match(colnames(datAssay),phen$id),]#
            load(paste0(dirDataMtEpic,"ann.MSet.raw.rda"))#
            ann=ann[match(rownames(datAssay),ann$id),]#
            load(paste0(dirDataMtEpic,"pd.RGset.all.rda"))#
            load(paste0(dirDataMtEpic,"sampleName_corSpear0.95_sample_quantnorm_betaValue.rda"))#
            j=match(sampleName,phen$Sample_Name)#
#
            if (length(grep("_mtEpic_chr1to22",variables))==1) {#
                i=which(ann$chr%in%1:22)#
                i=i[order(ann$chr[i],ann$pos[i])]#
            } else {#
                i=NULL#
            }#
            phen=phen[j,]#
            if (varSub=="mtEpicSam") {#
                rm(datAssay)#
                load(paste0(dirData,"ptid_",respVarName,".RData"))#
                j=match(ptid,phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                rm(phen)#
                training=training[j1,]#
            } else {#
                datAssay=datAssay[i,j]#
#
                load(paste0(dirData,"ptid_",respVarName,".RData"))#
                j=match(ptid,phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                rm(phen)#
                ptid=ptid[j1]#
                datAssay=datAssay[,j2]#
                training=training[j1,]#
                datAssay=t(datAssay)#
#
                nm=NULL#
                #load(paste0(dirData,"training_",respVarName,addVariables,dataset,dataVersion,".RData"))#
                #load(paste0(dirData,"ptid_",respVarName,addVariables,dataset,dataVersion,".RData"))#
                #rownames(training)=paste0("X",ptid); rm(ptid)#
                if (mtEpicFlag=="coMethDMR") {#
                    load(paste0("reg_coMethDMR",varSub,".RData"))#
                    regName=sub(":","_",sub("-","_",names(reg)))#
#
                    nm=sub(":","_",sub("-","_",names(reg)))#
                    varImpCaretMat=matrix(nrow=ncol(datClin)-1+length(reg),ncol=nFold*nRep*nrow(param),dimnames=list(c(colnames(datClin)[-respVarId],nm),tmp))#
                    fName=paste0("lmmTestAllRegions_",respVarName,platform,"_",predMethod,variables,dataset,dataVersion,fName2,"_log.txt")#
                } else if (mtEpicFlag=="pca") {#
                    if (T) {#
                        x1=matrix(nrow=nrow(training),ncol=nPC); nm=c(names(training),paste0("mtEpic_pc",1:nPC))#
                        if (respVarName%in%c("lfaat2","lfapt2")) {#
                            load(paste0(dirDataMtEpic,"pcMat_",respVarName,"_none_pca_mtEpic_chr1to22_pcaN5_20220320_seed1.RData"))#
                            x1=pcMat[match(paste0("X",ptid),rownames(pcMat)),paste0("mtEpic_pc",1:nPC)]#
                            rm(pcMat)#
                        }#
                        training=cbind(training,x1,stringsAsFactors=F)#
                        names(training)=nm#
                        rm(x1)#
                    }#
                } else {#
                    training=cbind(training,datAssay,stringsAsFactors=F)#
                }#
                rm(nm,datAssay)#
            }#
        }#
    }#
#
    cat("No. of patients with non-missing fatique score: ",nrow(training),"\n",sep="")#
    # No. of patients with non-missing fatique score: 1217#
#
    if (F) {#
        if (!onePlotFlag) pdf(paste("predictionPerformance_",respVarName,respType,variables,fileNameSuffix,".pdf",sep=""))#
        par(mfrow=c(1,1))#
        hist(training[,respVarName],main=paste("No. of patients with non-missing fatique score: ",nrow(training),sep=""),xlab=respVarName,breaks=100)#
        if (!onePlotFlag) dev.off()#
    }#
#
    ## -------------------------------#
    ## -------------------------------#
    #library(caret)#
#
    getVarImp=function(pv,pvThres=0.05,prop=NULL) {#
        mean(pv<pvThres,na.rm=T)#
    }#
#
    #pvThres=0.05#
    pvThres=as.numeric(sub("_filtPV","",filtFlag))#
    nFold=10#
#
    if (saveScratchData) {#
        for (predMethod in predMethodVec) {#
            #if (dataVersion%in%c("_20200508","")) dirResult=paste(dirWork,"royR/20201110/results/",sep="")#
            dirResult=paste0(dirWork,"royR/",iteration,"/results/")#
#
            if (length(grep("ScaleItems",variables))==1) {#
                dirData=dirDataScaleItem#
                OrganizedFeature=read.table(paste(dirVarScaleItem,"scs_sset",addVariables,"_variable_desciption_Final.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            } else {#
                dirData=dirDataTotal#
                OrganizedFeature=read.csv(paste(dirVarTotal,"scs_sset_variable_desciption_Final_RRedit.csv",sep=""),stringsAsFactors=F)#
            }#
            if (respVarName=="lfaat2") {#
                OrganizedFeature$Continuous=sub("leep","leea",OrganizedFeature$Continuous)#
            }#
            if (length(grep("none_",predMethod))!=1) {#
                clin=read.table(paste(dirData,"scs_sset_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                x=strsplit(predMethod,"_")[[1]]#
                #if (any(c("svmPoly")%in%x) | any(c("lasso","enet")%in%x & !"geno"%in%x & !any(c("mtEpic","mtEpicOnly")%in%x))) {#
                if (any(c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")%in%x)) {#
                    clin=read.table(paste(dirData,"scs_sset_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    #OrganizedFeature2=read.table(paste(dirData,"varInfo_",respVarName,addVariables,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    OrganizedFeature2=read.table(paste(dirData,"varInfo_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                }#
                #varInfo=read.table(paste(dirData,"varInfo",addVariables,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                varSub=strsplit(variables,"_")[[1]]; if (variables!="") varSub=varSub[varSub!=""]#
                if ("assess"%in%varSub) {#
                    for (k in which(names(clin)%in%c("Eosino1","Mono1","Lympho1","Neutro1","wtkg","WBC1","yearsfromdxtostart"))) {#
                        x=clin[,k]#
                        if (any(x<0,na.rm=T)) x=x+min(x,na.rm=T)#
                        if (any(x==0,na.rm=T)) {x1=0.5*min(x[which(x!=0)]); x=x+x1}#
                        x=log2(x)#
                        clin[,k]=x#
                    }#
                }#
#
                if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
                    load(paste0(dirData,"datGeno",dataset,".RData",sep=""))#
                    ann2=read.table(paste0(dirData,"HumanExome-12v1-1_A_Gene_Annotation.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    names(ann2)[match(c("Name","Chr","MapInfo","Alleles","Transcript.s.","Gene.s.","in.EXON","Mutation.s."),names(ann2))]=c("id","chr","pos","alleles","transcript","geneSym","inExom","mutation")#
                    i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(ann2$chr,ann2$pos))#
                    ann2=ann2[i,]#
                    if (variables%in%c("_geno_inflammation")) {#
                        tbl1=read.table(paste0(dirData,"candGene.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        i=which(toupper(ann2$geneSym)%in%toupper(tbl1$geneSym))#
                        rm(tbl1)#
                    } else if (variables%in%c("_geno_Wright2017Cytokine")) {#
                        tbl1=read.table(paste0(dirData,"Wright2017Cytokine_assays.txt.assaysForGenes.coords_fromLiftOver_hg19.txt",sep=""), sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T)#
                        tbl1=as.data.frame(t(sapply(tbl1[,1],function(x) {as.integer(strsplit(strsplit(sub("chr","",x),"-")[[1]][1],":")[[1]])},USE.NAMES=F)))#
                        colnames(tbl1)=c("chr","pos")#
                        i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$chr,tbl1$pos))#
                        i=which(!is.na(i))#
                        rm(tbl1)#
                    } else if (variables%in%c("_geno_oxytocin","_geno_relaxin")) {#
                        offset=22#
                        fName=dir(dirData,pattern=paste0(sub("_geno","",variables),"_kegg"))#
                        nm=read.table(paste0(dirData,fName,sep=""), sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T,nrow=1)#
                        tbl1=read.table(paste0(dirData,fName,sep=""),sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T,skip=1)#
                        nm=nm[1,1]#
                        x=substr(tbl1[,1],offset,nchar(tbl1[,1]))#
                        geneSym=c()#
                        for (i in 1:length(x)) {#
                            y=strsplit(x[i],";")[[1]][1]#
                            geneSym=c(geneSym,strsplit(y,", ")[[1]])#
                        }#
                        #print(table(toupper(ann2$geneSym)%in%toupper(geneSym)))#
                        i=which(toupper(ann2$geneSym)%in%toupper(geneSym))#
                        rm(offset,fName,tbl1,geneSym)#
                    } else if (variables%in%c("_geno_eQTLGen","_geno_eQTLGen_cis","_geno_eQTLGen_trans")) {#
                        if (variables%in%c("_geno_eQTLGen_cis")) {#
                            tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                            i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                            i=which(!is.na(i))#
                            rm(tbl1)#
                        } else if (variables%in%c("_geno_eQTLGen_trans")) {#
                            tbl1=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                            i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                            i=which(!is.na(i))#
                            rm(tbl1)#
                        } else {#
                            if (F) {#
                                tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                                tbl2=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                                i1=which(!is.na(i))#
                                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl2$SNPChr,tbl2$SNPPos))#
                                i2=which(!is.na(i))#
                                i=match(paste(datObj$ann$chr,datObj$ann$pos),c(paste(tbl1$SNPChr,tbl1$SNPPos),paste(tbl2$SNPChr,tbl2$SNPPos)))#
                                i12=which(!is.na(i))#
#
                                cat("\nNo. of loci: total ",nrow(datObj$ann)/2,", cis ",length(i1)/2," (",round(100*length(i1)/nrow(datObj$ann)),"%), trans ",length(i2)/2," (",round(100*length(i2)/nrow(datObj$ann)),"%), cis/trans ",length(i12)/2," (",round(100*length(i1)/nrow(datObj$ann)),"%)\n",sep="")#
                                '#
                                No. of loci: total 21525, cis 14542 (68%), trans 770 (4%), cis/trans 14652 (68%)#
                                '#
                            }#
                            tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                            tbl2=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                            tbl1=tbl1[,c("SNPChr","SNPPos")]#
                            tbl2=tbl2[,c("SNPChr","SNPPos")]#
                            tbl1=rbind(tbl1,tbl2)#
                            i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                            i=which(!is.na(i))#
                            rm(tbl2,tbl1)#
                        }#
                    } else {#
                        i=1:ncol(datObj$geno)#
                    }#
                    clin=cbind(datObj$phen[,respVarName],as.data.frame(datObj$geno[,i],stringsAsFactors=F),stringsAsFactors=F)#
                    nm=c(respVarName,colnames(datObj$geno)[i])#
                    names(clin)=nm#
                    rm(datObj,ann2)#
                }#
                if ("geno"%in%varSub) {#
                    if (length(grep("_geno_addModel",variables))==1) {#
                        if (predMethod%in%c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")) {#
                            load(paste0(dirData,"datGeno_addModel_",respVarName,dataset,"_surrogate.RData",sep=""))#
                        } else {#
                            load(paste0(dirData,"datGeno_addModel_",respVarName,dataset,".RData",sep=""))#
                        }#
                    } else {#
                        if (predMethod%in%c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")) {#
                            load(paste0(dirData,"datGeno_",respVarName,dataset,"_surrogate.RData",sep=""))#
                        } else {#
                            load(paste0(dirData,"datGeno_",respVarName,dataset,".RData",sep=""))#
                        }#
                    }#
                    load(paste0(dirData,"ptid_",respVarName,dataset,".RData"))#
                    j=match(ptid,datObj$phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                    datAssay=datObj$geno[j2,]#
                    training=training[j1,]#
                    training=cbind(training,datAssay,stringsAsFactors=F)#
                    rm(datObj); rm(ptid,j,j1,j2)#
                }#
                if (any(c("mtEpic","mtEpicOnly","mtEpicSam")%in%varSub)) {#
                    load(paste0(dirDataMtEpic,"m-values.rda"))#
                    datAssay=M#
                    rm(M)#
#
                    load(paste0(dirDataMtEpic,"phen.MSet.raw.rda"))#
                    phen=phen[match(colnames(datAssay),phen$id),]#
                    load(paste0(dirDataMtEpic,"ann.MSet.raw.rda"))#
                    ann=ann[match(rownames(datAssay),ann$id),]#
                    load(paste0(dirDataMtEpic,"pd.RGset.all.rda"))#
                    load(paste0(dirDataMtEpic,"sampleName_corSpear0.95_sample_quantnorm_betaValue.rda"))#
                    j=match(sampleName,phen$Sample_Name)#
#
                    if (length(grep("_mtEpic_chr1to22",variables))==1) {#
                        i=which(ann$chr%in%1:22)#
                        i=i[order(ann$chr[i],ann$pos[i])]#
                    } else {#
                        i=NULL#
                    }#
                    phen=phen[j,]#
                    if ("mtEpicSam"%in%x) {#
                        rm(datAssay)#
                        j=match(clin$ptid,phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                        rm(phen)#
                        clin=clin[j1,]#
                    } else {#
                        datAssay=datAssay[i,j]#
#
                        j=match(clin$ptid,phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                        rm(phen)#
                        datAssay=datAssay[,j2]#
                        clin=clin[j1,]#
                        datAssay=t(datAssay)#
#
                        nm=NULL#
                        if (mtEpicFlag=="coMethDMR") {#
                        } else if (mtEpicFlag=="pca") {#
                            if (T) {#
                                x1=matrix(nrow=nrow(clin),ncol=nPC); nm=c(names(clin),paste0("mtEpic_pc",1:nPC))#
                                if (F) {#
                                    if (exists("res")) res1=res#
                                    load(paste0(dirResult,"res_",respVarName,sub("_mtEpicOnly","_mtEpic",variables),"_mValue.RData"))#
                                    x1=res[match(rownames(datAssay),rownames(res)),paste0("PC",1:nPC)]#
                                    if (exists("res1")) {res=res1; rm(res1)}#
                                } else {#
                                    if (respVarName%in%c("lfaat2","lfapt2")) {#
                                        load(paste0(dirDataMtEpic,"pcMat_",respVarName,"_none_pca_mtEpic_chr1to22_pcaN5_20220320_seed1.RData"))#
                                        x1=pcMat[match(paste0("X",clin$ptid),rownames(pcMat)),paste0("mtEpic_pc",1:nPC)]#
                                        rm(pcMat)#
                                    }#
                                }#
                                clin=cbind(clin,x1,stringsAsFactors=F)#
                                names(clin)=nm#
                                rm(x1)#
                            }#
                        } else {#
                            training=cbind(training,datAssay,stringsAsFactors=F)#
                        }#
                        rm(nm,datAssay)                    }#
                }#
            }#
#
            predMethodThis=predMethod#
            param=bestTune=NULL#
            x=strsplit(predMethod,"_")[[1]]#
            if (any(c("svmPoly")%in%x)) {#
                param=data.frame(degree=1:3,scale=1,C=1)#
                k=grep("degree",x)#
                if (length(k)==1) {#
                    if (length(x)==k) {#
                        predMethodThis=paste(x[-k],collapse="_")#
                    } else {#
                        predMethodThis=paste(c(x[1:(k-1)],x[(k+1):length(x)]),collapse="_")#
                    }#
                    x1=strsplit(x[k],"scale")[[1]]; x1=as.numeric(c(sub("degree","",x1[1]),strsplit(x1[2],"C")[[1]]))#
                    bestTune=param[which(param$degree==x1[1] & param$scale==x1[2] & param$C==x1[3]),]#
                }#
            } else if (any(c("lasso","enet")%in%x)) {#
                if ("lasso"%in%x) {#
                    if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
                        param=data.frame(alpha=rep(1,3),lambda=c(0.0204,0.0560,0.1540))#
                    } else {#
                        param=data.frame(alpha=rep(1,3),lambda=c(0.0014,0.0137,0.1372))#
                    }#
                } else {#
                    if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
                        param=data.frame(alpha=rep(c(0.25,0.50,0.75),each=3),lambda=c(0.0204,0.0560,0.1540))#
                    } else {#
                        param=data.frame(alpha=rep(c(0.25,0.50,0.75),each=3),lambda=c(0.0014,0.0137,0.1372))#
                    }#
                }#
                k=grep("alpha",x)#
                if (length(k)==1) {#
                    if (length(x)==k) {#
                        predMethodThis=paste(x[-k],collapse="_")#
                    } else {#
                        predMethodThis=paste(c(x[1:(k-1)],x[(k+1):length(x)]),collapse="_")#
                    }#
                    x1=strsplit(x[k],"lambda")[[1]]; x1=as.numeric(c(sub("alpha","",x1[1]),x1[2]))#
                    bestTune=param[which(param$alpha==x1[1] & param$lambda==x1[2]),]#
                }#
            } else if (any(c("neuralNet","neuralNetNS","neuralNetS")%in%x)) {#
                predMethodThis=NA#
                bestTune=NA#
            } else {#
                if ("rf"%in%x) {#
                    k=grep("mtry",x)#
                    if (dataVersion%in%c("_20220320","_20200508")) {#
                        x1=ncol(training)-1#
                        param=data.frame(mtry=round(c(x1/4,x1/3,x1/2)+.1))#
                        if (length(k)==1) {#
                            if (length(x)==k) {#
                                predMethodThis=paste(x[-k],collapse="_")#
                            } else {#
                                predMethodThis=paste(c(x[1:(k-1)],x[(k+1):length(x)]),collapse="_")#
                            }#
                            x1=as.integer(sub("mtry","",x[k]))#
                            bestTune=data.frame(mtry=round((ncol(training)-1)/x1+.1))#
                        }#
                    } else {#
                        if (length(k)==1) {#
                            if (length(x)==k) {#
                                predMethodThis=paste(x[-k],collapse="_")#
                            } else {#
                                predMethodThis=paste(c(x[1:(k-1)],x[(k+1):length(x)]),collapse="_")#
                            }#
                            #x1=2:4#
                            x1=3:4#
                            param=data.frame(mtry=round((ncol(training)-1)/x1+.1))#
                            x1=as.integer(sub("mtry","",x[k]))#
                            bestTune=data.frame(mtry=round((ncol(training)-1)/x1+.1))#
                        } else {#
                            param=data.frame(mtry=floor(seq(2,ncol(training)-1,length=3)))#
                        }#
                    }#
                }#
            }#
            predMethodThis=sub(paste0(dataset,dataVersion),"",predMethodThis)#
            fName=fNameInSuffix#
            switch(predMethodThis,#
                "none_null"={#
                    methodNameLong="Null model"#
                },#
                "none_lm_lfaat1"={#
                    methodNameLong="Linear Regression (lfaat1 only)"#
                },#
                "none_spline_lfaat1_2knots"={#
                    methodNameLong="Cubic spline 5/95 percentile knots (lfaat1 only)"#
                },#
                "none_spline_lfaat1_3knots"={#
                    methodNameLong="Cubic spline quartile knots (lfaat1 only)"#
                },#
                "none_spline_lfaat1_5knots"={#
                    methodNameLong="Cubic spline 5 knots (lfaat1 only)"#
                },#
                "none_lm"={#
                    methodNameLong="Linear Regression Unfiltered"#
                },#
                "none_lm_filtPV0.05"={#
                    methodNameLong="Linear Regression Filtered"#
                },#
                "none_rpart"={#
                    methodNameLong="Rpart"#
                },#
                "none_rpart1se"={#
                    methodNameLong="Rpart with 1se rule"#
                },#
                "none_rf"={#
                    methodNameLong="Random Forest"#
                },#
                "none_svmPoly"={#
                    methodNameLong="Support Vector Machine"#
                },#
                "none_lasso"={#
                    methodNameLong="Lasso"#
                },#
                "none_enet"={#
                    methodNameLong="Elasticnet"#
                },#
                "none_lm_noLfaat1"={#
                    methodNameLong="Linear Regression Unfiltered (no lfaat1)"#
                },#
                "none_lm_noLfaat1_filtPV0.05"={#
                    methodNameLong="Linear Regression Filtered (no lfaat1)"#
                },#
                "none_rpart_noLfaat1"={#
                    methodNameLong="Rpart (no lfaat1)"#
                },#
                "none_rpart1se_noLfaat1"={#
                    methodNameLong="Rpart with 1se rule (no lfaat1)"#
                },#
                "none_rf_noLfaat1"={#
                    methodNameLong="Random Forest (no lfaat1)"#
                },#
                "none_svmPoly_noLfaat1"={#
                    methodNameLong="Support Vector Machine (no lfaat1)"#
                },#
                "none_lm_univariate_lfaat1ScaleItems"={#
                    methodNameLong="Univariate Linear Regression (lfaat1 scale items)"#
                },#
                "none_lm_univariate_lfaat1ScaleItems_filtPV0.05"={#
                    methodNameLong="Univariate Linear Regression Filtered (lfaat1 scale items)"#
                },#
                "none_lm_lfaat1ScaleItems"={#
                    methodNameLong="Linear Regression Unfiltered (lfaat1 scale items)"#
                },#
                "none_lm_lfaat1ScaleItems_filtPV0.05"={#
                    methodNameLong="Linear Regression Filtered (lfaat1 scale items)"#
                },#
                "none_rpart_lfaat1ScaleItems"={#
                    methodNameLong="Rpart (lfaat1 scale items)"#
                },#
                "none_rpart1se_lfaat1ScaleItems"={#
                    methodNameLong="Rpart with 1se rule (lfaat1 scale items)"#
                },#
                "none_rf_lfaat1ScaleItems"={#
                    methodNameLong="Random Forest (lfaat1 scale items)"#
                },#
                "none_svmPoly_lfaat1ScaleItems"={#
                    methodNameLong="Support Vector Machine (lfaat1 scale items)"#
                },#
                "none_null_withLfaat1ScaleItems"={#
                    if (dataVersion=="") dirResult=paste(dirWork,"royR/20200425/results/",sep="")#
                    methodNameLong="Null model"#
                },#
                "none_lm_withLfaat1ScaleItems"={#
                    methodNameLong="Linear Regression Unfiltered (with lfaat1 scale items)"#
                },#
                "none_lm_withLfaat1ScaleItems_filtPV0.05"={#
                    methodNameLong="Linear Regression Filtered (with lfaat1 scale items)"#
                },#
                "none_rpart_withLfaat1ScaleItems"={#
                    methodNameLong="Rpart (with lfaat1 scale items)"#
                },#
                "none_rpart1se_withLfaat1ScaleItems"={#
                    methodNameLong="Rpart with 1se rule (with lfaat1 scale items)"#
                },#
                "none_rf_withLfaat1ScaleItems"={#
                    methodNameLong="Random Forest (with lfaat1 scale items)"#
                },#
                "none_svmPoly_withLfaat1ScaleItems"={#
                    methodNameLong="Support Vector Machine (with lfaat1 scale items)"#
                },#
                "none_lasso_withLfaat1ScaleItems"={#
                    methodNameLong="Lasso (with lfaat1 scale items)"#
                },#
                "none_enet_withLfaat1ScaleItems"={#
                    methodNameLong="Elasticnet (with lfaat1 scale items)"#
                },#
                "none_null_geno"={#
                    if (dataVersion=="") dirResult=paste(dirWork,"royR/20200425/results/",sep="")#
                    methodNameLong="Null model"#
                },#
                "none_lm_geno_filtPV0.05"={#
                    methodNameLong="Linear Regression Filtered (genotyped data)"#
                },#
                "none_rpart1se_geno"={#
                    methodNameLong="Rpart with 1se rule (genotyped data)"#
                },#
                "none_rf_geno"={#
                    methodNameLong="Random Forest (genotyped data)"#
                },#
                "none_svmPoly_geno"={#
                    methodNameLong="Support Vector Machine (genotyped data)"#
                },#
                "none_lasso_geno"={#
                    methodNameLong="Lasso (genotyped data)"#
                },#
                "none_enet_geno"={#
                    methodNameLong="Elasticnet (genotyped data)"#
                },#
                "caret_lm"={#
                    methodNameLong="Caret Linear Regression"#
                    fName="_2"#
                },#
                "caret_rpart"={#
                    methodNameLong="Caret rpart"#
                    fName="_2"#
                },#
                "caret_rpart1se"={#
                    methodNameLong="Caret rpart with 1se rule"#
                    fName="_2"#
                },#
                "caret_rf"={#
                    methodNameLong="Caret Random Forest"#
                    fName="_1"#
                },#
                "caret_svmPoly"={#
                    methodNameLong="Caret Support Vector Machine"#
                    fName="_1"#
                }#
            )#
            x=strsplit(predMethod,"_")[[1]]#
            if ("lm"%in%x) {#
                methodNameLong="Linear Regression Unfiltered"#
                if ("univariate"%in%x) {#
                    methodNameLong="Univariate Linear Regression"#
                }#
                if (length(grep(filtFlag,predMethod,fixed=T))==1) {#
                    methodNameLong="Linear Regression Filtered"#
                    methodNameLong=paste0(methodNameLong,"Linear Regression Filtered PV ",sub("_filtPV","",filtFlag))#
                }#
            } else if ("rpart1se"%in%x) {#
                methodNameLong="Rpart with 1se rule"#
            } else if ("rf"%in%x) {#
                methodNameLong="Random Forest"#
            } else if ("svmPoly"%in%x) {#
                methodNameLong="Support Vector Machine"#
            } else if ("lasso"%in%x) {#
                methodNameLong="Lasso"#
            } else if ("enet"%in%x) {#
                methodNameLong="Elasticnet"#
            } else if ("neuralNet"%in%x) {#
                methodNameLong="Neural Network"#
            } else if ("neuralNetNS"%in%x) {#
                methodNameLong="Neural Network (unscaled variables)"#
            } else if ("neuralNetS"%in%x) {#
                methodNameLong="Neural Network (scaled variables)"#
            } else if ("null"%in%x) {#
                methodNameLong="Null model"#
            }#
            if (paste0("_with",capWords(scaleVarName),"ScaleItems")%in%x) {#
                methodNameLong=paste0(methodNameLong," (with ",scaleVarName," scale items)")#
            } else if ("geno"%in%x) {#
                if ("inflammation"%in%x) {#
                    methodNameLong=paste0(methodNameLong," (genotyped data, inflammation genes)")#
                } else if ("Wright2017Cytokine"%in%x) {#
                    methodNameLong=paste0(methodNameLong," (genotyped data, Wright 2017 cytokine genes)")#
                } else {#
                    methodNameLong=paste0(methodNameLong," (genotyped data)")#
                }#
            }#
            if (any(c("mtEpic","mtEpicOnly")%in%x)) {#
                if (mtEpicFlag=="coMethDMR") {#
                    methodNameLong=paste0(methodNameLong," (clinical + mtEpic coMethDMRs)")#
                } else if (mtEpicFlag=="pca") {#
                    methodNameLong=paste0(methodNameLong," (clinical + mtEpic PCs)")#
                } else {#
                    methodNameLong=paste0(methodNameLong," (clinical + mtEpic loci)")#
                }#
            }#
            if (dataVersion=="") {#
                x=strsplit(predMethod,"_")[[1]]#
                if (any(c("svmPoly")%in%x)) {#
                    fName="_scale1_seed1_1000"#
                }#
            }#
            if (paste0(scaleVarName,"Spline")%in%x) {#
                fName="_seed1"#
                numKnots=as.integer(sub("knots","",x[length(x)]))#
                if (length(grep(filtFlag,predMethod,fixed=T))==1) {#
                    methodNameLong="Linear Regression Filtered"#
                    if (numKnots==5) fName="_seed1_1000"#
                } else {#
                    methodNameLong="Linear Regression Unfiltered"#
                }#
                if (numKnots==2) {#
                    methodNameLong=paste(methodNameLong,", ",scaleVarName," cubic spline 5/95 percentile knots",sep="")#
                } else if (numKnots==3) {#
                    methodNameLong=paste(methodNameLong,", ",scaleVarName," cubic spline quartile knots",sep="")#
                } else {#
                    methodNameLong=paste(methodNameLong,", ",scaleVarName," cubic spline 5 knots",sep="")#
                }#
            }#
            if (length(grep(filtFlag,predMethod,fixed=T))==1) {#
                #fName=paste(dataset,dataVersion,filtFlag,fName,sep="")#
                fName=paste(dataset,dataVersion,fName,sep="")#
            } else {#
                fName=paste(dataset,dataVersion,fName,sep="")#
            }#
            methodNameShort=""#
            if (length(grep("_null",predMethod))==1) {#
                methodNameShort="Null"#
            } else if (length(grep("_lm",predMethod))==1) {#
                if (length(grep("_filt",predMethod))==1) {#
                    methodNameShort="Linear regression (filtered)"#
                } else if (length(grep("_univariate",predMethod))==1) {#
                        methodNameShort="Linear regression (univariate)"#
                } else {#
                    methodNameShort="Linear regression (unfiltered)"#
                }#
            } else if (length(grep("_rpart",predMethod))==1) {#
                methodNameShort="RPART"#
            } else if (length(grep("_rf",predMethod))==1) {#
                methodNameShort="Random forest"#
            } else if (length(grep("_svmPoly",predMethod))==1) {#
                methodNameShort="SVM"#
            } else if (length(grep("_lasso",predMethod))==1) {#
                methodNameShort="Lasso"#
            } else if (length(grep("_enet",predMethod))==1) {#
                methodNameShort="Elasticnet"#
            } else if (length(grep("_neuralNet",predMethod))==1) {#
                methodNameShort="Neural network"#
            }#
#
            predMethodThis=predMethod#
            x=strsplit(predMethod,"_")[[1]]#
            if (dataVersion%in%c("_20220320","_20200508")) {#
                k=grep("mtry|degree|alpha",x)#
                if (length(k)==1) {#
                    predMethodThis=paste(x[-k],collapse="_")#
                }#
            } else {#
                k=grep("mtry",x)#
                if (length(k)==1) {#
                    if (length(x)==k) {#
                        predMethodThis=paste(c(x[-k],"mtry43"),collapse="_")#
                    } else {#
                        predMethodThis=paste(c(x[1:(k-1)],"mtry43",x[(k+1):length(x)]),collapse="_")#
                    }#
                } else {#
                    k=grep("degree",x)#
                    if (length(k)==1) {#
                        k=grep("scale1",x)#
                        if (length(k)==1) {#
                            if (length(x)==k) {#
                                predMethodThis=paste(c(x[-k],"scale1"),collapse="_")#
                            } else {#
                                predMethodThis=paste(c(x[1:(k-1)],"scale1",x[(k+1):length(x)]),collapse="_")#
                            }#
                        } else {#
                            k=grep("degree",x)#
                            if (length(x)==k) {#
                                predMethodThis=paste(x[-k],collapse="_")#
                            } else {#
                                predMethodThis=paste(c(x[1:(k-1)],x[(k+1):length(x)]),collapse="_")#
                            }#
                        }#
                    } else {#
                        k=grep("alpha",x)#
                        if (length(k)==1) {#
                            if (length(x)==k) {#
                                predMethodThis=paste(c(x[-k],"alpha"),collapse="_")#
                            } else {#
                                predMethodThis=paste(c(x[1:(k-1)],"alpha",x[(k+1):length(x)]),collapse="_")#
                            }#
                        }#
                    }#
                }#
            }#
            #x=strsplit(predMethod,"_")[[1]]#
            #predMethodThis=predMethod#
            #predMethodThis=sub(filtFlag,"",sub(paste0(dataset,dataVersion),"",predMethodThis))#
            if (length(grep("_filt",predMethod))==1) {#
                predMethodThis=sub(paste0(variables,dataset,dataVersion,filtFlag),paste0(filtFlag,variables),predMethodThis)#
            } else {#
                predMethodThis=sub(paste0(dataset,dataVersion),"",predMethodThis)#
            }#
            #if ("null"%in%x) predMethodThis=sub(variables,"",predMethodThis)#
            load(paste0(dirResult,"fit_",respVarName,respType,"_",predMethodThis,fName,".RData"))#
            cat("\n\n============== ",predMethod,"\n",sep="")#
            if (length(grep("none_",predMethod))==1) {#
                #x=strsplit(predMethod,"_")[[1]]#
                if (any(c("rf")%in%x)) {#
                    param=data.frame(mtry=unique(perfMat[,"mtry"]))#
                } else if (any(c("neuralNet","neuralNetNS","neuralNetS")%in%x)) {#
                    param=data.frame(batchSize=unique(perfMat[,"batchSize"]))#
                } else if (any(c("lasso","enet")%in%x)) {#
                    x2=paste(perfMat[,"alpha"], perfMat[,"lambda"])#
                    param=as.data.frame(perfMat[which(!duplicated(x2)),c("alpha","lambda")])#
                }#
                if (scaleVarName%in%x) {#
                    bestTune=data.frame(intercept=TRUE)#
                    varImpAllMat=varImpFstatMat#
                    fit=list(varImpMat=varImpMat,perfMat=perfMat,pred=pred)#
                    if ("acc"%in%colnames(fit$perfMat)) {#
                        res=list(methodNameShort=methodNameShort,methodNameLong=methodNameLong,bestTune=bestTune,rmse=fit$perfMat[,"rmse"],acc=fit$perfMat[,"acc"],varImp=varImpMat)#
                    } else {#
                        res=list(methodNameShort=methodNameShort,methodNameLong=methodNameLong,bestTune=bestTune,rmse=fit$perfMat[,"rmse"],varImp=varImpMat)#
                    }#
                } else {#
                    if (any(c("rf","svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")%in%x)) {#
                        if (length(grep("mtry|degree|alpha|batchSize",x))!=1) load(paste(dirResult,"bestTune_",respVarName,respType,"_",predMethodThis,fName,".RData",sep=""))#
#
                        dat=perfMat#
                        i=1:nrow(dat)#
                        for (k in 1:ncol(bestTune)) {#
                            if (names(bestTune)[k]%in%colnames(dat)) {#
                                i=i[which(dat[i,names(bestTune)[k]]==bestTune[1,k])]#
                            }#
                        }#
                        perfMat=dat[i,]#
#
                        varImpAllMat=varImpCaretMat#
                        pId=sapply(colnames(varImpAllMat),getParamId,USE.NAMES=F)#
                        varImpAllMat=varImpAllMat[,which(pId==which(apply(param,1,paste,collapse="_")==paste(bestTune,collapse="_")))]#
                        predAll=pred#
                        i=1:nrow(predAll)#
                        for (k in 1:ncol(bestTune)) {#
                            i=i[which(predAll[i,names(bestTune)[k]]==bestTune[1,k])]#
                        }#
                        pred=predAll[i,]#
                    } else if ("lm"%in%x) {#
                        bestTune=data.frame(intercept=TRUE)#
                        varImpAllMat=varImpFstatMat#
                    } else {#
                        bestTune=data.frame(parameter="none")#
                        varImpAllMat=varImpCaretMat#
                    }#
                    x1=rownames(varImpAllMat)#
                    #if (any(c("svmPoly")%in%x) | any(c("lasso","enet")%in%x & !"geno"%in%x & !any(c("mtEpic","mtEpicOnly")%in%x))) {#
                    if (any(c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")%in%x)) {#
                        #OrganizedFeature2=read.table(paste(dirData,"varInfo_",respVarName,addVariables,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        OrganizedFeature2=read.table(paste(dirData,"varInfo_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        k=match(OrganizedFeature2$surrogate,x1); k1=which(!is.na(k)); k2=k[k1]#
                        x1[k2]=OrganizedFeature2$variable[k1]#
                    }#
                    varImpMat=data.frame(variable=x1,surrogate=rownames(varImpAllMat),impOverall=rep(NA,nrow(varImpAllMat)),stringsAsFactors=F)#
                    repId=sapply(colnames(varImpAllMat),getRepId,USE.NAMES=F)#
                    for (k in 1:nrow(varImpMat)) {#
                        varImpMat$impOverall[k]=mean(meanByBatch(x=varImpAllMat[k,],id=repId)$value,na.rm=T)#
                    }#
                    varImpMat$stat=varImpMat$impOverall#
                    x=max(abs(varImpMat$impOverall-min(varImpMat$impOverall,na.rm=T)),na.rm=T)#
                    varImpMat$impOverall=100*(varImpMat$impOverall-min(varImpMat$impOverall,na.rm=T))/x#
                    fit=list(varImpMat=varImpMat,perfMat=perfMat,pred=pred)#
                    if ("acc"%in%colnames(fit$perfMat)) {#
                        res=list(methodNameShort=methodNameShort,methodNameLong=methodNameLong,bestTune=bestTune,rmse=fit$perfMat[,"rmse"],acc=fit$perfMat[,"acc"],varImp=varImpMat)#
                    } else {#
                        res=list(methodNameShort=methodNameShort,methodNameLong=methodNameLong,bestTune=bestTune,rmse=fit$perfMat[,"rmse"],varImp=varImpMat)#
                    }#
                }#
                foldRepId=rownames(fit$perfMat)#
#
                rm(varImpMat,perfMat)#
            } else {#
                foldRepId=fit$resample$Resample#
                #fit$finalModel$variable.importance#
                res=list(methodNameShort=methodNameShort,methodNameLong=methodNameLong,bestTune=fit$bestTune,rmse=fit$resample$RMSE,varImp=data.frame(variable=rownames(varImp(fit)$importance),surrogate=rownames(varImp(fit)$importance),impOverall=varImp(fit)$importance$Overall,stringsAsFactors=F))#
                rownames(res)=NULL#
                k=which(!res$varImp$variable%in%names(clin))#
                res$varImp$variable[k]=substr(res$varImp$variable[k],1,nchar(res$varImp$variable[k])-1)#
                res$varImp=res$varImp[order(-res$varImp$impOverall),]#
                res$varImp=res$varImp[!duplicated(res$varImp$variable),]#
            }#
            x=meanByBatch(x=res$rmse,id=sapply(foldRepId,getRepId,USE.NAMES=F))#
            names(x)=c("rep","rmse")#
            res$repLevelInfo=x#
            if ("acc"%in%names(res)) {#
                x=meanByBatch(x=res$acc,id=sapply(foldRepId,getRepId,USE.NAMES=F)); names(x)=c("rep","acc")#
                res$repLevelInfo$acc=x$acc#
            }#
#
            cat("No. of reps: ",nrow(res$repLevelInfo),"\n",sep="")#
            cat("Best tuning parameters:\n",sep="")#
            print(res$bestTune)#
            dat=fit$pred#
            i=1:nrow(dat)#
            for (k in 1:ncol(res$bestTune)) {#
                if (names(res$bestTune)[k]%in%names(dat)) {#
                    i=i[which(dat[i,names(res$bestTune)[k]]==res$bestTune[1,k])]#
                }#
            }#
            dat=dat[i,]#
            dat$repId=sapply(dat$Resample,getRepId,USE.NAMES=F)#
            dat=dat[order(dat$repId,dat$rowIndex),]#
            pred=matrix(nrow=nrow(training),ncol=sum(!duplicated(dat$repId)))#
            rownames(pred)=rownames(training)#
            n=nrow(pred)#
            for (k in 1:ncol(pred)) {#
                pred[,k]=dat$pred[(k-1)*n+(1:n)]#
            }#
#
            save(res,file=paste(dirScratch,"res_",respVarName,respType,"_",predMethod,".RData",sep=""))#
            save(pred,file=paste(dirScratch,"pred_",respVarName,respType,"_",predMethod,".RData",sep=""))#
        }#
#
        rm(fit,res,pred,dat)#
        save.image("tmp.RData")#
    } ## END saveScratchData#
#
    ## -------------------------------#
    ## -------------------------------#
    parThis=list(cex=0.5,pch=19,cex.main=3,cex.lab=3,cex.axis=2.5)#
    figNoThis=0#
    figNoThis=ifelse(variables=="",0,5)#
    library(ggplot2)#
    library(gridExtra)#
#
    if (variables=="_combined" & respType=="") {#
#
        ## --------------#
        ## RMSE - combined#
        figNoThis=figNoThis+1#
        fName=paste0("predictionPerformance_",respVarName,respType,"_rmse",variables,fileNameSuffix)#
        if (figNoFlag) fName=paste0("fig",figNoThis,"_",fName)#
        if (!onePlotFlag) {#
            switch(outputFormat,#
                "pdf"={fName=paste0(fName,".pdf")},#
                "png"={fName=paste0(fName,"_%1d.png")}#
            )#
        }#
        lim=NULL#
        lim=c()#
        varList=c("",paste0("_with",capWords(scaleVarName),"ScaleItems"))#
        varList=c("_assess","_assess_leep5t1_leep12t1"); if (respVarName%in%c("lfaat2","lfaat6")) varList=gsub("leep","leea",varList)#
        for (predMethod in predMethodVec) {#
            for (varThis in varList) {#
                #for (varThis in c(paste0("_with",capWords(scaleVarName),"ScaleItems"))) {#
                fName1=sub(variables,varThis,predMethod)#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                lim=c(lim,res$repLevelInfo$rmse)#
            }#
        }#
        lim=c(range(lim,na.rm=T))#
        lim#
        lim=c(0,2)#
        lim=c(1,2.5)#
        lim=c(1.4,2.3)#
        lim=c(1.6,2.4)#
#
        nBr=100#
        nBr=1000#
#
        plot_list <- vector("list",length(predMethodVec))#
        tmp=rep(NA,2*(length(predMethodVec)+1))#
        tmpC=vector(mode="character",length=2*(length(predMethodVec)+1))#
        tbl=data.frame(method=tmpC,noOfRep=tmp,mean=tmp,sd=tmp,mean_rmse=tmp,perc2.5_rmse=tmp,perc97.5_rmse=tmp,stringsAsFactors=F)#
        names(tbl)=c("method","noOfRep",paste(c("mean","sd"),"_",respVarName,respType,sep=""),"mean_rmse","perc2.5_rmse","perc97.5_rmse")#
        pId2=1#
        tbl$method[pId2]="observed"#
        tbl[pId2,paste("mean_",respVarName,respType,sep="")]=mean(training[,respVarName],na.rm=T)#
        tbl[pId2,paste("sd_",respVarName,respType,sep="")]=sd(training[,respVarName],na.rm=T)#
        for (pId in 1:length(predMethodVec)) {#
            #x3=NA#
            #for (varThis in c("",paste0("_with",capWords(scaleVarName),"ScaleItems"))) {#
            varList=c(paste0("_with",capWords(scaleVarName),"ScaleItems"),paste0("_with",capWords(scaleVarName),"ScaleItems"))#
            varList=c("",paste0("_with",capWords(scaleVarName),"ScaleItems"))#
            varList=c("_assess","_assess_leep5t1_leep12t1"); if (respVarName%in%c("lfaat2","lfaat6")) varList=gsub("leep","leea",varList)#
            for (vId in 1:length(varList)) {#
                varThis=varList[vId]#
                predMethod=sub(variables,varThis,predMethodVec[pId])#
                fName1=predMethod#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                load(paste(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData",sep=""))#
                dat=apply(pred,1,mean,na.rm=T)#
                tbl$method[pId2]=predMethod#
                tbl[pId2,paste("mean_",respVarName,respType,sep="")]=mean(dat,na.rm=T)#
                tbl[pId2,paste("sd_",respVarName,respType,sep="")]=sd(dat,na.rm=T)#
                tbl$noOfRep[pId2]=nrow(res$repLevelInfo)#
                tbl$mean_rmse[pId2]=mean(res$repLevelInfo$rmse)#
                tbl$perc2.5_rmse[pId2]=quantile(res$repLevelInfo$rmse,probs=0.025,na.rm=T)#
                tbl$perc97.5_rmse[pId2]=quantile(res$repLevelInfo$rmse,probs=0.975,na.rm=T)#
                xlab="RMSE"#
                xlab=ifelse(pId==length(predMethodVec),"RMSE","")#
                xlab=ifelse(pId%%(length(predMethodVec)/2)==0,"RMSE","")#
                if (dispNoOfRepFlag) {#
                    header=paste(variablesNameShort,": ",res$methodNameShort,", no. of reps ",nrow(res$repLevelInfo),sep="")#
                } else {#
                    #header=paste(variablesNameShort,": ",res$methodNameShort,sep="")#
                    header=capWords(paste(res$methodNameShort,sep=""))#
                }#
                if ((length(grep("_rf",predMethod))==1 & length(grep("_rf",predMethodVec))>1) | (length(grep("_svmPoly",predMethod))==1 & length(grep("_svmPoly",predMethodVec))>1) | (length(grep("_lasso",predMethod))==1 & length(grep("_lasso",predMethodVec))>1) | (length(grep("_enet",predMethod))==1 & length(grep("_enet",predMethodVec))>1)) {#
                    if (length(grep("_rf",predMethod))==1) {x=paste("=p/",round((ncol(training)-1)/res$bestTune),sep="")} else {x=res$bestTune}#
                    header=paste(header," ",paste(paste(names(res$bestTune),x,sep=""),collapse=","),sep="")#
                }#
                colVec=c("darkred","steelblue")#
                #ylab=paste0("With ",sub("2","1",respVarNameShort)," ",ifelse(varThis=="","TS","SI"))#
                ylab="Density"#
                #if (varThis=="") {#
                if (vId==1) {#
                    x1=res$repLevelInfo$rmse#
                    x3=tbl$mean_rmse[pId2]#
                } else {#
                    x2=res$repLevelInfo$rmse#
                    x3=c(x3,tbl$mean_rmse[pId2])#
                }#
                pId2=pId2+1#
            }#
            #x1=rep(NA,length(x2))#
            df =data.frame(x1=x1,x2=x2)#
            df1=data.frame(x=rep(x3[1],2),y=c(0,1))#
            df2=data.frame(x=rep(x3[2],2),y=c(0,-1))#
            df3=data.frame(x=c(1.9,1.95),y=rep(0.7,2))#
            #cat("\n\n---------- ",predMethodVec[pId],"\n")#
            #cat("diff(range(df$x1))/30 ",diff(range(df$x1))/30,"\n")#
            #binwidth=diff(range(df$x1))/30#
            #binwidth=0.001#
            #binwidth=0.002#
            #binwidth=0.008#
            binwidth=0.004#
#
            plot_list[[pId]] = ggplot(df, aes(x)) +#
            geom_histogram( aes(x = x1, y = after_stat(count/max(count))),binwidth = binwidth, fill=colVec[1]) +#
            geom_histogram( aes(x = x2, y = -after_stat(count/max(count))), binwidth = binwidth, fill=colVec[2]) +#
            geom_line(aes(x=x,y=y),data=df1,linetype="dashed") +#
            geom_line(aes(x=x,y=y),data=df2,linetype="dashed") +#
            geom_hline(yintercept=0, linetype="solid", color = "darkgrey") +#
            xlim(1.5,2.4)+ylim(-1,1)+labs(title=header,x=xlab,y=ylab)#
#
            if (pId==1) {#
                if (predVarName=="Assessable") {#
                    nm=paste0("With ",c("assessable","assessable\n+ wornout + exhaustion"))#
                } else {#
                    nm=paste0("With ",sub("2","1",strsplit(respVarNameShort," ")[[1]][1]),c(" TS"," SI"))#
                }#
                #geom_line(aes(x=x,y=y),data=df3,linetype="dashed") +#
                plot_list[[pId]] = plot_list[[pId]] +#
                geom_line(aes(x=x,y=y),data=df3,linetype="blank") +#
                geom_text(x=1.9, y=0.7,label="Mean RMSE",col="black") +#
                geom_text(x=1.9, y=0.2,label=nm[1],col=colVec[1]) +#
                geom_text(x=1.9, y=-0.2,label=nm[2],col=colVec[2])#
            }#
        }#
        if (!onePlotFlag) {#
            glist <- lapply(plot_list, ggplotGrob)#
            #ggsave(paste(fName,"_%1d.png",sep=""), marrangeGrob(glist,nrow=length(glist)/2,ncol=1,top=NULL))#
            ggsave(fName, marrangeGrob(glist,nrow=length(glist),ncol=1,top=NULL),width=7,height=2*7)#
            dev.off()#
        }#
        ## --------------#
        ## Predicted vs. observed density plots#
#
        figNoThis=figNoThis+1#
#
        dat=as.data.frame(training[,respVarName])#
        #if (respVarName=="lfaat2") colnames(dat)=c("MorningFatigueScore") else colnames(dat)=c("EveningFatigueScore")#
        switch(respVarName,#
            "lfaat2"={colnames(dat)=c("Time2MorningFatigueScore")},#
            "lfaat6"={colnames(dat)=c("Time6MorningFatigueScore")},#
            "lfapt2"={colnames(dat)=c("Time2EveningFatigueScore")},#
            "lfapt6"={colnames(dat)=c("Time6EveningFatigueScore")},#
            "newafitott2"={colnames(dat)=c("Time2CognitiveFatigueScore")},#
            "newafitott6"={colnames(dat)=c("Time6CognitiveFatigueScore")}#
        )#
        dat$source="Observed"#
        dat$order=0#
        head(dat)#
        dim(dat)#
#
        dat1=dat#
        colVec=c("grey","darkred","steelblue")#
        xlab=respVarNameShort; ylab="Density"#
        pId2=1#
        for (pId in 1:length(predMethodVec)) {#
            predMethod=predMethodVec[pId]#
            x=strsplit(predMethod,"_")[[1]]#
            if ("null"%in%x) next#
            dat2=dat1#
            #varList=c(paste0("_with",capWords(scaleVarName),"ScaleItems"))#
            varList=c("",paste0("_with",capWords(scaleVarName),"ScaleItems"))#
            varList=c("_assess","_assess_leep5t1_leep12t1"); if (respVarName%in%c("lfaat2","lfaat6")) varList=gsub("leep","leea",varList)#
            for (varThis in varList) {#
                predMethod=sub(variables,varThis,predMethodVec[pId])#
                fName1=predMethod#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                load(paste(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData",sep=""))#
#
                dat=apply(pred,1,mean,na.rm=T)#
                dat=as.data.frame(dat)#
                #if (respVarName=="lfaat2") colnames(dat)=c("MorningFatigueScore") else colnames(dat)=c("EveningFatigueScore")#
                switch(respVarName,#
                    "lfaat2"={colnames(dat)=c("Time2MorningFatigueScore")},#
                    "lfaat6"={colnames(dat)=c("Time6MorningFatigueScore")},#
                    "lfapt2"={colnames(dat)=c("Time2EveningFatigueScore")},#
                    "lfapt6"={colnames(dat)=c("Time6EveningFatigueScore")},#
                    "newafitott2"={colnames(dat)=c("Time2CognitiveFatigueScore")},#
                    "newafitott6"={colnames(dat)=c("Time6CognitiveFatigueScore")}#
                )#
                dat$source=capWords(paste0(res$methodNameShort))#
                dat$order=as.integer(varThis==paste0("_with",capWords(scaleVarName),"ScaleItems"))+1#
#
                header=dat$source#
                if (predVarName=="Assessable") {#
                    nm=paste0("Predicted (with ",ifelse(varThis=="_assess","assessable","assessable\n+ wornout + exhaustion"),")")#
                } else {#
                    nm=paste0("Predicted (with ",sub("2","1",strsplit(respVarNameShort," ")[[1]][1])," ",ifelse(varThis=="","TS","SI"),")")#
                }#
                dat$source=nm#
                dat2=rbind(dat2,dat)#
            }#
            dat2$source=factor(dat2$source,levels=unique(dat2$source))#
            fName=paste0("predictionPerformance_",respVarName,respType,"_densityPlot_predVsObs",variables,fileNameSuffix,"_",pId2)#
            if (figNoFlag) fName=paste0("fig",figNoThis,"_",fName)#
            if (!onePlotFlag) {#
                switch(outputFormat,#
                    "pdf"={fName=paste0(fName,".pdf")},#
                    "png"={fName=paste0(fName,".png")}#
                )#
            }#
            if (F) {#
                if (respVarName=="lfaat2") {#
                    ggplot(dat2,aes(MorningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)#
                } else {#
                    ggplot(dat2,aes(EveningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)#
                }#
            }#
            switch(respVarName,#
                "lfaat2"={ggplot(dat2,aes(Time2MorningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)},#
                "lfaat6"={ggplot(dat2,aes(Time6MorningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)},#
                "lfapt2"={ggplot(dat2,aes(Time2EveningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)},#
                "lfapt6"={ggplot(dat2,aes(Time6EveningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)},#
                "newafitott2"={ggplot(dat2,aes(Time2CognitiveFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)},#
                "newafitott6"={ggplot(dat2,aes(Time6CognitiveFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)}#
            )#
            if (!onePlotFlag) {#
                ggsave(fName)#
                #unlink(fName)#
            }#
            pId2=pId2+1#
        }#
#
        ## --------------#
        break#
    } else {#
    }#
    ## -------------------------------#
    ## -------------------------------#
#
    nVar=20#
    nVar=5#
    #cat("\n\n============== ",nVar," most important variables:\n",sep="")#
    for (predMethod in predMethodVec) {#
        x=strsplit(predMethod,"_")[[1]]#
        if (!scaleVarName%in%x) {#
            fName1=predMethod#
            #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
            load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
            #cat("\n-------- ",res$methodNameShort,": rep",nrow(res$repLevelInfo),"\n\n",sep="")#
            if (F) {#
                varName=ifelse("impOverall"%in%names(res$varImp),"impOverall","propOverall")#
                cat("\n-------- ",variablesNameShort,": ",res$methodNameShort,"\n\n",sep="")#
                print(res$varImp[order(-res$varImp[,varName]),][1:nVar,])#
            }#
        }#
    }#
    ## -------------------------------#
    ## -------------------------------#
    ## Performance evaluation#
    ## --------------#
    ## RMSE#
#
    if (F) {#
        if (respType=="") {#
            if (!onePlotFlag) pdf(paste("predictionPerformance_rmse_",respVarName,respType,variables,fileNameSuffix,".pdf",sep=""))#
#
            par(mfrow=c(4,1))#
            #par(mar=c(5, 4, 4, 2) + 0.1)#
            par(mar=c(4, 4, 2, .5) + 0.1)#
#
            lim=NULL#
            lim=c()#
            for (predMethod in predMethodVec) {#
                fName1=predMethod#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                lim=c(lim,res$repLevelInfo$rmse)#
                #cat(predMethod," ",length(res$rmse)/10,"\n")#
            }#
            lim=c(range(lim,na.rm=T))#
            lim#
            lim=c(0,2)#
            lim=c(1.5,1.8)#
#
            nBr=1000#
#
            tmp=vector(mode="numeric",length=length(predMethodVec))#
            tmpC=vector(mode="character",length=length(predMethodVec))#
            tbl=data.frame(method=tmpC,noOfRep=tmp,mean_rmse=tmp,perc2.5_rmse=tmp,perc97.5_rmse=tmp,stringsAsFactors=F)#
            for (pId in 1:length(predMethodVec)) {#
                predMethod=predMethodVec[pId]#
                fName1=predMethod#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                tbl$method[pId]=predMethod#
                tbl$noOfRep[pId]=nrow(res$repLevelInfo)#
                tbl$mean_rmse[pId]=mean(res$repLevelInfo$rmse)#
                tbl$perc2.5_rmse[pId]=quantile(res$repLevelInfo$rmse,probs=0.025,na.rm=T)#
                tbl$perc97.5_rmse[pId]=quantile(res$repLevelInfo$rmse,probs=0.975,na.rm=T)#
                if (dispNoOfRepFlag) {header=paste(variablesNameShort,": ",res$methodNameShort,", no. of reps ",nrow(res$repLevelInfo),sep="")#
                } else {header=paste(variablesNameShort,": ",res$methodNameShort,sep="")}#
                if (is.null(lim)) {#
                    plot(density(res$repLevelInfo$rmse,na.rm=T),main=header,xlab="RMSE")#
                } else {#
                    plot(density(res$repLevelInfo$rmse,na.rm=T),xlim=lim,main=header,xlab="RMSE")#
                }#
                x=c(tbl$mean_rmse[pId],tbl$perc2.5_rmse[pId],tbl$perc97.5_rmse[pId])#
                names(x)=c("mean","2.5%","97.5%")#
                x=x[1]#
                abline(v=x,lty="dashed",col="red")#
                axis(side=1,at=x,labels=names(x),col.axis="red",las=3)#
            }#
#
            if (!onePlotFlag) dev.off()#
        }#
    }#
#
    ## --------------#
    ## RMSE#
#
    if (respType=="") {#
        figNoThis=figNoThis+1#
        fName=paste0("predictionPerformance_rmse_",respVarName,respType,variables,fileNameSuffix)#
        if (figNoFlag) fName=paste0("fig",figNoThis,"_",fName)#
        if (!onePlotFlag) {#
            switch(outputFormat,#
                "pdf"={#
                    #pdf(paste0(fName,".pdf"))#
                    pdf(paste0(fName,".pdf"),width=1*7,height=length(predMethodVec)*7/4)#
                },#
                "png"={#
                    if (onePlotFlag) {png(paste0(fName,"_%1d.png"),res=200,width=4*480,height=4*480)#
                    } else {png(paste0(fName,".png"),res=200,width=4*480,height=length(predMethodVec)*480)}#
                }#
            )#
        }#
        #par(mar=c(5, 4, 4, 2) + 0.1)#
        par(mar=c(6, 5, 2, .5) + 0.1)#
        if (onePlotFlag) par(mfrow=c(4,1)) else par(mfrow=c(length(predMethodVec),1))#
#
        lim=NULL#
        lim=c()#
        for (predMethod in predMethodVec) {#
            fName1=predMethod#
            #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
            load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
            lim=c(lim,res$repLevelInfo$rmse)#
            #cat(predMethod," ",length(res$rmse)/10,"\n")#
        }#
        lim=c(range(lim,na.rm=T))#
        lim#
        lim=c(0,2)#
        lim=c(1,2.5)#
        lim=c(1.4,2.3)#
        lim=c(1.6,2.4)#
#
        if (variables%in%c(candGene)) {#
            lim=c(2.0,2.8)#
        }#
        nBr=1000#
    }#
#
    tmp=vector(mode="numeric",length=length(predMethodVec)+1)#
    tmp=rep(NA,length(predMethodVec)+1)#
    tmpC=vector(mode="character",length=length(predMethodVec)+1)#
    tbl=data.frame(method=tmpC,noOfRep=tmp,mean=tmp,sd=tmp,mean_rmse=tmp,perc2.5_rmse=tmp,perc97.5_rmse=tmp,stringsAsFactors=F)#
    names(tbl)=c("method","noOfRep",paste0(c("mean","sd"),"_",respVarName),"mean_rmse","perc2.5_rmse","perc97.5_rmse")#
#
    load(paste0(dirScratch,"res_",respVarName,respType,"_",predMethodVec[1],".RData"))#
    if ("acc"%in%names(res$repLevelInfo)) {#
        tbl2=data.frame(mean_acc=tmp,perc2.5_acc=tmp,perc97.5_acc=tmp,stringsAsFactors=F)#
        names(tbl2)=c("mean_acc","perc2.5_acc","perc97.5_acc")#
    }#
#
    pId2=1#
    tbl$method[pId2]="observed"#
    tbl[pId2,paste0("mean_",respVarName)]=mean(training[,respVarName],na.rm=T)#
    tbl[pId2,paste0("sd_",respVarName)]=sd(training[,respVarName],na.rm=T)#
    for (pId in 1:length(predMethodVec)) {#
        pId2=pId+1#
        predMethod=predMethodVec[pId]#
        fName1=predMethod#
        #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
        load(paste0(dirScratch,"res_",respVarName,respType,"_",fName1,".RData"))#
        load(paste0(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData"))#
        dat=apply(pred,1,mean,na.rm=T)#
        tbl$method[pId2]=predMethod#
        tbl[pId2,paste0("mean_",respVarName)]=mean(dat,na.rm=T)#
        tbl[pId2,paste0("sd_",respVarName)]=sd(dat,na.rm=T)#
        tbl$noOfRep[pId2]=nrow(res$repLevelInfo)#
        tbl$mean_rmse[pId2]=mean(res$repLevelInfo$rmse)#
        tbl$perc2.5_rmse[pId2]=quantile(res$repLevelInfo$rmse,probs=0.025,na.rm=T)#
        tbl$perc97.5_rmse[pId2]=quantile(res$repLevelInfo$rmse,probs=0.975,na.rm=T)#
        if ("acc"%in%names(res$repLevelInfo)) {#
            tbl2$mean_acc[pId2]=mean(res$repLevelInfo$acc)#
            tbl2$perc2.5_acc[pId2]=quantile(res$repLevelInfo$acc,probs=0.025,na.rm=T)#
            tbl2$perc97.5_acc[pId2]=quantile(res$repLevelInfo$acc,probs=0.975,na.rm=T)#
        }#
        if (respType=="") {#
            xlab="RMSE"#
            xlab=ifelse(pId==length(predMethodVec),"RMSE","")#
            if (dispNoOfRepFlag) {#
                header=paste0(variablesNameShort,": ",res$methodNameShort,", no. of reps ",nrow(res$repLevelInfo))#
            } else {#
                #header=paste0(variablesNameShort,": ",res$methodNameShort)#
                header=capWords(paste0(res$methodNameShort))#
            }#
            if ((length(grep("_rf",predMethod))==1 & length(grep("_rf",predMethodVec))>1) | (length(grep("_svmPoly",predMethod))==1 & length(grep("_svmPoly",predMethodVec))>1) | (length(grep("_lasso",predMethod))==1 & length(grep("_lasso",predMethodVec))>1) | (length(grep("_enet",predMethod))==1 & length(grep("_enet",predMethodVec))>1)) {#
                if (length(grep("_rf",predMethod))==1) {x=paste0("=p/",round((ncol(training)-1)/res$bestTune))} else {x=res$bestTune}#
                header=paste(header," ",paste0(paste0(names(res$bestTune),x),collapse=","))#
            }#
            if (is.null(lim)) {#
                hist(res$repLevelInfo$rmse,main=header,xlab=xlab,ylab="Count",breaks=nBr,cex.main=parThis$cex.main,cex.lab=parThis$cex.lab,cex.axis=parThis$cex.axis)#
            } else {#
                hist(res$repLevelInfo$rmse,xlim=lim,main=header,xlab=xlab,ylab="Count",breaks=nBr,cex.main=parThis$cex.main,cex.lab=parThis$cex.lab,cex.axis=parThis$cex.axis)#
            }#
            x=c(tbl$mean_rmse[pId2],tbl$perc2.5_rmse[pId2],tbl$perc97.5_rmse[pId2])#
            names(x)=c("mean","2.5%","97.5%")#
            x=x[1]#
            abline(v=x,lty="dashed",col="red")#
            axis(side=1,at=x,labels=names(x),col.axis="red",las=3)#
        }#
    }#
    #for (k in 1:ncol(tbl)) if (is.numeric(tbl[,k])) tbl[,k]=round(tbl[,k],2)#
    k=which.min(tbl$mean_rmse)#
    x=strsplit(tbl$method[k],"_")[[1]]#
    predMethodBest=x[2]#
    if (predMethodBest=="lm" & sub("_","",filtFlag)%in%x) predMethodBest=paste0(predMethodBest,filtFlag)#
    nm=c(names(tbl),paste0("mean_rmse_proportionGreaterWRT",x[2]))#
    x1=rep(NA,nrow(tbl))#
    for (i in 1:nrow(tbl)) {x1[i]=(tbl$mean_rmse[i]-tbl$mean_rmse[k])/tbl$mean_rmse[k]}#
    #x1=round(x1,2)#
    tbl=cbind(tbl,x1)#
    names(tbl)=nm#
    if ("acc"%in%names(res$repLevelInfo)) {#
        k=which.max(tbl2$mean_acc)#
        x=strsplit(tbl$method[k],"_")[[1]]#
        predMethodBest=x[2]#
        if (predMethodBest=="lm" & sub("_","",filtFlag)%in%x) predMethodBest=paste0(predMethodBest,filtFlag)#
        nm=c(names(tbl),names(tbl2),paste0("mean_acc_proportionGreaterWRT",x[2]))#
        x1=rep(NA,nrow(tbl2))#
        for (i in 1:nrow(tbl2)) {x1[i]=(tbl2$mean_acc[k]-tbl2$mean_acc[i])/tbl2$mean_acc[k]}#
        tbl=cbind(tbl,tbl2,x1)#
        names(tbl)=nm#
        rm(tbl2)#
    }#
    for (k in 2:ncol(tbl)) {tbl[,k]=round(tbl[,k],3)}#
    #tbl=tbl[,c("method","noOfRep",paste0(c("mean","sd"),"_",respVarName),"mean_rmse","perc2.5_rmse","perc97.5_rmse")]#
    write.table(tbl,file=paste0("prediction_",respVarName,respType,variables,fileNameSuffix,".txt"),col.names=T,row.names=F, sep="\t",quote=F)#
#
    if (respType=="") {if (!onePlotFlag) dev.off()}#
    ## --------------#
    ## Predicted vs. observed#
      if (F) {#
          if (respType=="") {#
              figNoThis=figNoThis+1#
#
              dat=as.data.frame(training[,respVarName])#
              #if (respVarName=="lfaat2") colnames(dat)=c("MorningFatigueScore") else colnames(dat)=c("EveningFatigueScore")#
              switch(respVarName,#
                  "lfaat2"={colnames(dat)=c("Time2MorningFatigueScore")},#
                  "lfaat6"={colnames(dat)=c("Time6MorningFatigueScore")},#
                  "lfapt2"={colnames(dat)=c("Time2EveningFatigueScore")},#
                  "lfapt6"={colnames(dat)=c("Time6EveningFatigueScore")},#
                  "newafitott2"={colnames(dat)=c("Time2CognitiveFatigueScore")},#
                  "newafitott6"={colnames(dat)=c("Time6CognitiveFatigueScore")}#
              )#
              dat$source="Observed"#
              dat$order=0#
              head(dat)#
              dim(dat)#
#
              dat1=dat#
#
              for (pId in 1:length(predMethodVec)) {#
                  predMethod=predMethodVec[pId]#
                  fName1=predMethod#
                  #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                  load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                  load(paste(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData",sep=""))#
#
                  dat=apply(pred,1,mean,na.rm=T)#
                  dat=as.data.frame(dat)#
                  #if (respVarName=="lfaat2") colnames(dat)=c("MorningFatigueScore") else colnames(dat)=c("EveningFatigueScore")#
                  switch(respVarName,#
                      "lfaat2"={colnames(dat)=c("Time2MorningFatigueScore")},#
                      "lfaat6"={colnames(dat)=c("Time6MorningFatigueScore")},#
                      "lfapt2"={colnames(dat)=c("Time2EveningFatigueScore")},#
                      "lfapt6"={colnames(dat)=c("Time6EveningFatigueScore")},#
                      "newafitott2"={colnames(dat)=c("Time2CognitiveFatigueScore")},#
                      "newafitott6"={colnames(dat)=c("Time6CognitiveFatigueScore")}#
                  )#
                  dat$source=capWords(paste(res$methodNameShort,sep=""))#
                  dat$order=pId#
#
                  dat2=rbind(dat1,dat)#
                  dat2$source=factor(dat2$source,levels=unique(dat2$source))#
                  if (!onePlotFlag) {#
                      switch(outputFormat,#
                          "pdf"={#
                              fName=paste("predictionPerformance_",respVarName,respType,"_densityPlot_predVsObs",variables,fileNameSuffix,"_",pId,".pdf",sep="")#
                          },#
                          "png"={#
                              fName=paste("predictionPerformance_",respVarName,respType,"_densityPlot_predVsObs",variables,fileNameSuffix,"_",pId,".png",sep="")#
                          }#
                      )#
                  }#
                  if (figNoFlag) fName=paste("fig",figNoThis,"_",fName,sep="")#
                  if (F) {#
                      if (respVarName=="lfaat2") {#
                          ggplot(dat2,aes(MorningFatigueScore,fill=source))+geom_density(alpha=0.2)+scale_fill_manual(values=c("red","blue"))+xlim(0,10)+ylim(0,0.75)#
                      } else {#
                          ggplot(dat2,aes(EveningFatigueScore,fill=source))+geom_density(alpha=0.2)+scale_fill_manual(values=c("red","blue"))+xlim(0,10)+ylim(0,0.75)#
                      }#
                  }#
                  switch(respVarName,#
                      "lfaat2"={ggplot(dat2,aes(Time2MorningFatigueScore,fill=source))+geom_density(alpha=0.2)+scale_fill_manual(values=c("red","blue"))+xlim(0,10)+ylim(0,0.75)},#
                      "lfaat6"={ggplot(dat2,aes(Time6MorningFatigueScore,fill=source))+geom_density(alpha=0.2)+scale_fill_manual(values=c("red","blue"))+xlim(0,10)+ylim(0,0.75)},#
                      "lfaat2"={ggplot(dat2,aes(Time2EveningFatigueScore,fill=source))+geom_density(alpha=0.2)+scale_fill_manual(values=c("red","blue"))+xlim(0,10)+ylim(0,0.75)},#
                      "lfaat6"={ggplot(dat2,aes(Time6EveningFatigueScore,fill=source))+geom_density(alpha=0.2)+scale_fill_manual(values=c("red","blue"))+xlim(0,10)+ylim(0,0.75)},#
                      "newafitott2"={ggplot(dat2,aes(Time2CognitiveFatigueScore,fill=source))+geom_density(alpha=0.2)+scale_fill_manual(values=c("red","blue"))+xlim(0,10)+ylim(0,0.75)},#
                      "newafitott6"={ggplot(dat2,aes(Time6CognitiveFatigueScore,fill=source))+geom_density(alpha=0.2)+scale_fill_manual(values=c("red","blue"))+xlim(0,10)+ylim(0,0.75)}#
                  )#
                  if (!onePlotFlag) {#
                      ggsave(fName)#
                      #unlink(fName)#
                  }#
              }#
          }#
      }#
    ## --------------#
    ## Predicted vs. observed#
    if (F) {#
        if (respType=="") {#
            if (!onePlotFlag) pdf(paste("predictionPerformance_densityPlot_predVsObs",variables,fileNameSuffix,"_2.pdf",sep=""))#
#
            par(mfrow=c(4,1))#
            par(mar=c(4, 4, 2, .5) + 0.1)#
            xlim=c(0,10); ylim=c(0,0.8)#
            dat=as.data.frame(training[,respVarName])#
            #if (respVarName=="lfaat2") colnames(dat)=c("MorningFatigueScore") else colnames(dat)=c("EveningFatigueScore")#
            switch(respVarName,#
                "lfaat2"={colnames(dat)=c("Time2MorningFatigueScore")},#
                "lfaat6"={colnames(dat)=c("Time6MorningFatigueScore")},#
                "lfapt2"={colnames(dat)=c("Time2EveningFatigueScore")},#
                "lfapt6"={colnames(dat)=c("Time6EveningFatigueScore")},#
                "newafitott2"={colnames(dat)=c("Time2CognitiveFatigueScore")},#
                "newafitott6"={colnames(dat)=c("Time6CognitiveFatigueScore")}#
            )#
            dat$source="Observed"#
            head(dat)#
            dim(dat)#
#
            dat2=dat#
            if (F) {#
                if (respVarName=="lfaat2") {#
                    plot(density(dat$MorningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)#
                } else {#
                    plot(density(dat$EveningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)#
                }#
            }#
            switch(respVarName,#
                "lfaat2"={plot(density(dat$Time2MorningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)},#
                "lfaat6"={plot(density(dat$Time6MorningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)},#
                "lfaat2"={plot(density(dat$Time2EveningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)},#
                "lfaat6"={plot(density(dat$Time6EveningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)},#
                "newafitott2"={plot(density(dat$Time2CognitiveFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)},#
                "newafitott6"={plot(density(dat$Time6CognitiveFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)}#
            )#
            abline(h=c(0.4),lty="dashed")#
#
            for (predMethod in predMethodVec) {#
                fName1=predMethod#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                load(paste(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData",sep=""))#
#
                dat=apply(pred,1,mean,na.rm=T)#
                dat=as.data.frame(dat)#
                #if (respVarName=="lfaat2") colnames(dat)=c("MorningFatigueScore") else colnames(dat)=c("EveningFatigueScore")#
                switch(respVarName,#
                    "lfaat2"={colnames(dat)=c("Time2MorningFatigueScore")},#
                    "lfaat6"={colnames(dat)=c("Time6MorningFatigueScore")},#
                    "lfapt2"={colnames(dat)=c("Time2EveningFatigueScore")},#
                    "lfapt6"={colnames(dat)=c("Time6EveningFatigueScore")},#
                    "newafitott2"={colnames(dat)=c("Time2CognitiveFatigueScore")},#
                    "newafitott6"={colnames(dat)=c("Time6CognitiveFatigueScore")}#
                )#
                dat$source=paste(res$methodNameShort,sep="")#
#
                if (F) {#
                    if (respVarName=="lfaat2") {#
                        plot(density(dat$MorningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)#
                    } else {#
                        plot(density(dat$EveningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)#
                    }#
                }#
                switch(respVarName,#
                    "lfaat2"={plot(density(dat$Time2MorningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)},#
                    "lfaat6"={plot(density(dat$Time6MorningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)},#
                    "lfaat2"={plot(density(dat$Time2EveningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)},#
                    "lfaat6"={plot(density(dat$Time6EveningFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)},#
                    "newafitott2"={plot(density(dat$Time2CognitiveFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)},#
                    "newafitott6"={plot(density(dat$Time6CognitiveFatigueScore,na.rm=T),xlim=xlim,ylim=ylim,main="",xlab=dat$source)}#
                )#
                abline(h=c(0.4),lty="dashed")#
#
                dat2=rbind(dat2,dat)#
            }#
#
            if (!onePlotFlag) dev.off()#
        }#
    }#
#
    ## -------------------------------#
    ## -------------------------------#
    ## Sensitivity/specificity#
    ## Residuals#
    if (respType=="") {#
        library(BlandAltmanLeh)#
#
        parThis2=parThis#
#
        iRep=1#
#
        plotParam="predVsResi_noLim"#
        plotParam=""#
#
        plotTypeVec=c("obsVsResi","predVsResi","obsVsPred","blandAlt")#
        plotTypeVec=c("obsVsPred")#
        plotTypeVec=c("obsVsPred","blandAlt")#
        for (plotType in plotTypeVec) {#
            figNoThis=figNoThis+1#
            fName=paste("predictionPerformance_",plotType,"_",respVarName,respType,variables,fileNameSuffix,sep="")#
            if (figNoFlag) fName=paste("fig",figNoThis,"_",fName,sep="")#
            if (!onePlotFlag) {#
                switch(outputFormat,#
                    "pdf"={pdf(paste(fName,".pdf",sep=""),height=7,width=1.5*7)#
                        parThis2$cex.main=2; parThis2$cex.lab=2; parThis2$cex.axis=1.2#
                        parThis2$mar=mar=c(5,5,5,2)+0.1#
                    },#
                    "png"={png(paste(fName,"_%1d.png",sep=""),res=200,height=2*480,width=3*480)#
                        parThis2$cex.main=1.2; parThis2$cex.lab=1.2; parThis2$cex.axis=1#
                        parThis2$mar=c(4,4,2,0.5)+0.1#
                        parThis2$mar=mar=c(4,4,3,1)+0.1#
                    }#
                )#
            }#
            #par(mar=c(4, 4, 2, .5) + 0.1)#
            par(mar=parThis2$mar)#
            for (iRep in 1:3) {#
                if (onePlotFlag) par(mfrow=c(2,2)) else par(mfrow=c(2,3))#
                limObs=limResi=limMean=limDiff=c()#
                for (predMethod in predMethodVec) {#
                    fName1=predMethod#
                    #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                    load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                    load(paste(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData",sep=""))#
                    resi=matrix(nrow=nrow(pred),ncol=ncol(pred))#
                    for (k in 1:ncol(resi)) {resi[,k]=training[,respVarName]-pred[,k]}#
                    switch(plotType,#
                        "obsVsResi"={#
                            #dat1=training[,respVarName]; dat2=apply(resi,1,mean,na.rm=T)#
                            dat1=training[,respVarName]; dat2=resi[,iRep]#
                            xlab="Observed"; ylab="Residuals: Mean of resampled residuals"#
                            limResi=range(c(limResi,dat2),na.rm=T)#
                        },#
                        "predVsResi"={#
                            #dat1=apply(pred,1,mean,na.rm=T); dat2=apply(resi,1,mean,na.rm=T)#
                            dat1=apply(pred,1,mean,na.rm=T); dat2=resi[,iRep]#
                            xlab="Predicted: Mean of resampled predicted"; ylab="Residuals: Mean of resampled residuals"#
                            limResi=range(c(limResi,dat2),na.rm=T)#
                        },#
                        "obsVsPred"={#
                            #dat1=training[,respVarName]; dat2=apply(pred,1,mean,na.rm=T)#
                            dat1=training[,respVarName]; dat2=pred[,iRep]#
                            xlab="Observed"; ylab="Predicted: Mean of resampled predicted"#
                            limObs=range(c(limObs,dat1,dat2),na.rm=T)#
                        },#
                        "blandAlt"={#
                            #dat1=training[,respVarName]; dat2=apply(pred,1,mean,na.rm=T)#
                            dat1=training[,respVarName]; dat2=pred[,iRep]#
                            xlab="Observed"; ylab="Predicted: Mean of resampled predicted"#
                            limMean=range(c(limMean,(dat1+dat2)/2),na.rm=T)#
                            limDiff=range(c(limDiff,(dat2-dat1)),na.rm=T)#
                        }#
                    )#
                }#
                limObs=limMean=c(0,10)#
                limResi=limDiff=c(-6,6)#
#
                for (predMethod in predMethodVec) {#
                    fName1=predMethod#
                    #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                    load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                    load(paste(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData",sep=""))#
                    #resi=training[,respVarName]-pred#
                    resi=matrix(nrow=nrow(pred),ncol=ncol(pred))#
                    for (k in 1:ncol(resi)) {resi[,k]=training[,respVarName]-pred[,k]}#
                    switch(plotType,#
                        "obsVsResi"={#
                            xlab="Observed"; ylab="Residuals: Mean of resampled residuals"#
                            #dat1=training[,respVarName]; dat2=apply(resi,1,mean,na.rm=T)#
                            xlab="Observed"; ylab=paste0("Residuals (repetition ",iRep,")")#
                            dat1=training[,respVarName]; dat2=resi[,iRep]#
                            xlim=limObs; ylim=limResi#
                        },#
                        "predVsResi"={#
                            xlab="Predicted: Mean of resampled predicted"; ylab="Residuals: Mean of resampled residuals"#
                            #dat1=apply(pred,1,mean,na.rm=T); dat2=apply(resi,1,mean,na.rm=T)#
                            xlab="Predicted: Mean of resampled predicted"; ylab=paste0("Residuals (repetition ",iRep,")")#
                            dat1=apply(pred,1,mean,na.rm=T); dat2=resi[,iRep]#
                            xlim=limObs; ylim=limResi#
                        },#
                        "obsVsPred"={#
                            xlab="Observed"; ylab="Predicted: Mean of resampled predicted"#
                            xlab="Observed"; ylab="Predicted"#
                            #dat1=training[,respVarName]; dat2=apply(pred,1,mean,na.rm=T)#
                            xlab="Observed"; ylab=paste0("Predicted (repetition ",iRep,")")#
                            dat1=training[,respVarName]; dat2=pred[,iRep]#
                            xlim=ylim=range(dat1,na.rm=T)#
                            xlim=limObs; ylim=limObs#
                        },#
                        "blandAlt"={#
                            xlab="Observed"; ylab="Predicted: Mean of resampled predicted"#
                            #dat1=training[,respVarName]; dat2=apply(pred,1,mean,na.rm=T)#
                            xlab="Observed"; ylab=paste0("Predicted (repetition ",iRep,")")#
                            dat1=training[,respVarName]; dat2=pred[,iRep]#
                            xlim=limMean; ylim=limDiff#
                        }#
                    )#
                    if (dispNoOfRepFlag) {#
                        header=paste(variablesNameShort,": ",res$methodNameShort,", no. of reps ",nrow(res$repLevelInfo),sep="")#
                    } else {#
                        #header=paste(variablesNameShort,": ",res$methodNameShort,sep="")#
                        header=capWords(paste(res$methodNameShort,sep=""))#
                    }#
                    if (plotType=="blandAlt") {#
                        #header=paste("Bland-Altman Plot\n",header,sep="")#
                        #rf_ba.stats=bland.altman.stats(as.numeric(rf_predictions), as.numeric(observations))#
                        #paste("critical difference is", round(rf_ba.stats$critical.diff,4))#
                        ## ylim gives error "formal argument "ylim" matched by multiple actual arguments"#
                        bland.altman.plot(dat1,dat2,xlim=xlim,main=header,xlab="Mean", ylab="Difference",cex=parThis2$cex,pch=parThis2$pch,cex.main=parThis2$cex.main,cex.lab=parThis2$cex.lab,cex.axis=parThis2$cex.axis)#
                    } else {#
                        #if (plotType=="obsVsPred") header2=paste(header,"\nSame x & y axes range",sep="") else header2=header#
                        header2=header#
                        plot(dat1,dat2,xlim=xlim,ylim=ylim,main=header2,xlab=xlab,ylab=ylab,cex=parThis2$cex,pch=parThis2$pch,cex.main=parThis2$cex.main,cex.lab=parThis2$cex.lab,cex.axis=parThis2$cex.axis)#
                        if (plotType=="obsVsPred") {#
                            abline(c(0,1),lty="dashed",col="red",lwd=2)#
                            if (drawLine$type=="loess") {#
                                fit=loess(dat2~dat1,span=drawLine$span)#
                                j=order(fit$x); lines(fit$x[j],fit$fitted[j],col="green",lwd=2)#
                            }#
                            if ("predVsResi_noLim"%in%plotParam) {#
                                plot(dat1,dat2,main=paste(header,"\nDifferent x & y axes ranges",sep=""),xlab=xlab,ylab=ylab,cex=parThis2$cex,pch=parThis2$pch,cex.main=parThis2$cex.main,cex.lab=parThis2$cex.lab,cex.axis=parThis2$cex.axis)#
                                fit=lm(dat2~dat1)#
                                abline(fit$coef,lty="dashed",col="red")#
                            }#
                        } else {#
                            abline(h=0,lty="dashed",col="red")#
                        }#
                    }#
#
                }#
            }#
            if (!onePlotFlag) dev.off()#
        }#
    }#
    ## -------------------------------#
    ## -------------------------------#
    ## Sensitivity/specificity#
    ## Correlation-coefficients#
#
    if (F) {#
        if (respType=="") {#
            if (!onePlotFlag) pdf(paste("predictionPerformance_predVsObsCorr",variables,fileNameSuffix,".pdf",sep=""))#
#
            par(mfrow=c(4,1))#
            par(mar=c(4, 4, 2, .5) + 0.1)#
#
            lim=NULL#
            if (F) {#
            lim=c()#
            for (predMethod in predMethodVec) {#
                fName1=predMethod#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData",sep=""))#
                x=apply(pred,2,cor,y=training[,respVarName],use="complete.obs",method="pearson")#
                lim=c(lim,x)#
            }#
            lim=c(range(lim,na.rm=T))#
            }#
            lim=c(0.4,0.7)#
#
            nBr=1000#
#
            for (predMethod in predMethodVec) {#
                cat("\n\n-------- ",predMethod,"\n")#
                fName1=predMethod#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                load(paste(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData",sep=""))#
                cat(names(pred),"\n")#
                if (dispNoOfRepFlag) {header=paste(variablesNameShort,": ",res$methodNameShort,", no. of reps ",nrow(res$repLevelInfo),sep="")#
                } else {header=paste(variablesNameShort,": ",res$methodNameShort,", no. of reps ",nrow(res$repLevelInfo),sep="")}#
                x=apply(pred,2,cor,y=training[,respVarName],use="complete.obs",method="pearson")#
                xlab=paste(respVarNameShort," (obs vs. pred): Pearson correlation coefficient",sep="")#
                if (is.null(lim)) {#
                    hist(x,main=header,xlab=xlab,breaks=nBr)#
                } else {#
                    hist(x,xlim=lim,main=header,xlab=xlab,breaks=nBr)#
                }#
            }#
#
            if (!onePlotFlag) dev.off()#
        }#
    }#
#
    ## -------------------------------#
    ## -------------------------------#
    ## Variable importance: Plot#
#
    if (F) {#
        if (length(predMethodVec)>1) {#
            if (!onePlotFlag) pdf(paste("predictionPerformance_variableImportance_",respVarName,respType,variables,fileNameSuffix,".pdf",sep=""),height=7,width=1.5*7)#
#
            par(mar=c(4, 4, 2, .5) + 0.1)#
            if (onePlotFlag) par(mfrow=c(2,2)) else par(mfrow=c(2,3))#
#
            for (pId1 in 1:(length(predMethodVec)-1)) {#
                predMethod=predMethodVec[pId1]#
                x=strsplit(predMethod,"_")[[1]]#
                if ("null"%in%x) next#
                if (!scaleVarName%in%x) {#
                    #print(predMethod)#
                    fName1=predMethod#
                    #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                    load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                    res$predMethod=sub("none_","",predMethod)#
                    if ("impOverall"%in%names(res$varImp)) {#
                        res$varOrderName="Variable imp score"#
                        res$varImp$Overall=res$varImp$impOverall#
                    } else {#
                        res$varOrderName="Proportion of times a variable is selected"#
                        res$varImp$Overall=res$varImp$propOverall#
                    }#
                    res$varImp=res$varImp[order(res$varImp$Overall,decreasing=T),]#
                    dat1=res#
                    for (pId2 in (pId1+1):length(predMethodVec)) {#
                        predMethod=predMethodVec[pId2]#
                        x=strsplit(predMethod,"_")[[1]]#
                        if ("null"%in%x) next#
                        if (!scaleVarName%in%x) {#
                            fName1=predMethod#
                            #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                            load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                            res$predMethod=sub("none_","",predMethod)#
                            if ("impOverall"%in%names(res$varImp)) {#
                                #res$varOrderName="Variable importance score"#
                                res$varOrderName="Variable imp score"#
                                res$varImp$Overall=res$varImp$impOverall#
                            } else {#
                                res$varOrderName="Proportion of times a variable is selected"#
                                res$varImp$Overall=res$varImp$propOverall#
                            }#
                            res$varImp=res$varImp[order(res$varImp$Overall,decreasing=T),]#
                            dat2=res#
                            k=match(dat1$varImp$variable,dat2$varImp$variable); k1=which(!is.na(k)); k2=k[k1]#
                            #header=paste(variables,": Prediction - Variable importance",sep="")#
                            header=paste(variablesNameShort,sep="")#
                            xlab=paste(dat1$methodNameShort,": ",dat1$varOrderName,sep="")#
                            ylab=paste(dat2$methodNameShort,": ",dat2$varOrderName,sep="")#
                            plot(dat1$varImp$Overall[k1],dat2$varImp$Overall[k2],main=header,xlab=xlab,ylab=ylab,cex=parThis$cex,pch=parThis$pch,cex.lab=1)#
                            abline(c(0,1),lty="dashed",col="red")#
                        }#
                    }#
                }#
            }#
#
            if (!onePlotFlag) dev.off()#
        }#
    }#
#
    ## --------------#
    ## Variable importance: Table#
    library(dplyr)#
    dirThis="../ctx/pmFat_predT1T2_pilot/royR/20200115/data/"#
    dirThis2="../ctx/pmFat_predT1T2_pilot/royR/20200228/data/"#
    dirThis3="../fatigueOmics/SCS_AmFatigue_predT1T2/royR/data/"#
    #scs_FaigueT2 <- load(paste(dirThis,"scs.fatigueEnergyT2.Rda",sep=""))#
    scs_FaigueT2 <- load(paste0(dirThis3,"scs.fatigueEnergyT2T6.Rda"))#
    scs_sset_fatige2 <- scs#
    scs_all <- load(paste(dirThis,"scs.t1.Rda",sep=""))#
    scs_sset <- scs#
    if (addVariables=="_withFatiqueScaleItems") {#
        scs_all <- load(paste(dirThis2,"scs.t1.entire.Rda",sep=""))#
        varInfo=read.table(paste(dirThis2,"scs.t1.scale.variable.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
        if (respVarName=="lfaat2") {#
            varInfo$variable=sub("leep","leea",varInfo$variable)#
            varInfo$label=sub("PM","AM",varInfo$label)#
        }#
        k=which(names(scs)%in%varInfo$variable[which(varInfo$metaVariable=="Fatigue Scale Items")] & !names(scs)%in%names(scs_sset))#
        k=c(which(names(scs)=="ptid"),k)#
        scs=scs[,k]#
        scs_sset <- full_join(scs_sset, scs, by = "ptid")#
    }#
    scs_sset <- full_join(scs_sset, scs_sset_fatige2, by = "ptid")#
    scs_sset[scs_sset == "-1"] <- NA#
    i=!is.na(scs_sset[,respVarName])#
    scs_sset <- scs_sset[i,]#
    varInfo=data.frame(variable=colnames(scs_sset),propMiss=apply(scs_sset, 2,function(x){sum(is.na(x))/length(rownames(scs_sset))}),stringsAsFactors=F)#
    rm(dirThis,dirThis2,scs_FaigueT2,scs_all,scs_sset,scs)#
#
    tbl=NULL#
    x=strsplit(sub(filtFlag,"",predMethodVec[1]),"_")[[1]]; x[2]="null"; x=paste(x,collapse="_")#
    #for (predMethod in predMethodVec) {#
    for (predMethod in x) {#
        x=strsplit(predMethod,"_")[[1]]#
        #if (!any(c(scaleVarName,"null","svmPoly")%in%x) & !any(c("lasso","enet")%in%x & !"geno"%in%x & !any(c("mtEpic","mtEpicOnly")%in%x))) {#
        #if (!any(c(scaleVarName,"null","svmPoly","lasso","enet")%in%x)) {#
        if (T) {#
            fName1=predMethod#
            #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
            load(paste0(dirScratch,"res_",respVarName,respType,"_",fName1,".RData"))#
            tbl=data.frame(variable=unique(res$varImp$variable),stringsAsFactors=F)#
            #tbl$proportionMissing=varInfo$propMiss[match(tbl$variable,varInfo$variable)]#
            colName=names(tbl)#
            break#
        }#
    }#
    rm(varInfo)#
    for (predMethod in predMethodVec) {#
        x=strsplit(predMethod,"_")[[1]]#
        if (!scaleVarName%in%x) {#
            fName1=predMethod#
            #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
            load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
            res$predMethod=sub("none_","",predMethod)#
            if ("impOverall"%in%names(res$varImp)) {#
                res$varOrderNameShort="score"#
                res$varImp$Overall=res$varImp$impOverall#
            } else {#
                res$varOrderNameShort="proportion"#
                res$varImp$Overall=res$varImp$propOverall#
            }#
            res$varImp=res$varImp[order(res$varImp$Overall,decreasing=T),]#
            colName=c(colName,paste(res$varOrderNameShort,"_",res$predMethod,sep=""))#
            k=match(tbl$variable,res$varImp$variable); k1=which(!is.na(k)); k2=k[k1]#
            x=rep(NA,nrow(tbl))#
            x[k1]=res$varImp$Overall[k2]#
            tbl=cbind(tbl,x,stringsAsFactors=F)#
            #if (predMethod=="none_lm_univariate_lfaat1ScaleItems") {#
            if (length(grep("lm_univariate",predMethod))==1) {#
                if (F) {#
                    x=rep(NA,nrow(tbl))#
                    x[k1]=res$varImp$stat[k2]#
                    tbl=cbind(tbl,x,stringsAsFactors=F)#
                    colName=c(colName,paste0("meanFstat_",res$predMethod))#
                }#
                tbl2=read.table(paste0(dirWork,"royR/univariate/stat_",respVarName,respType,"_lm_univariate_geno",dataset,".txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                x=rep(NA,nrow(tbl))#
                x[k1]=tbl2$fstat[match(res$varImp$variable,tbl2$id)][k2]#
                tbl=cbind(tbl,x,stringsAsFactors=F)#
                colName=c(colName,paste0("fstat_",res$predMethod))#
                k=which(colName!=paste0("score_",res$predMethod))#
                tbl=tbl[,k]#
                colName=colName[k]#
#
            }#
        }#
    }#
    if (!is.null(tbl)) {#
        names(tbl)=colName#
        #tbl=tbl[order(-tbl$score_caret_rpart1se),]#
        #tbl=tbl[order(-tbl$score_rf),]#
        #k=grep(paste("score_lm",variables,filtFlag,sep=""),names(tbl))#
        #k=grep(paste("score_lasso",variables,sep=""),names(tbl))#
        #k=grep(paste0("score_",predMethodBest,variables),names(tbl))#
        k=grep(paste0("score_",predMethodBest,variables),sub(paste0(variables,dataset,dataVersion,filtFlag),paste0(filtFlag,variables,dataset,dataVersion),names(tbl)))#
        if (variables%in%c("_geno_eQTLGen","_geno_eQTLGen_cis","_geno_eQTLGen_trans")) {#
            k=grep(paste("score_lm_",variables,sep=""),names(tbl))#
            k=grep(paste(filtFlag,variables,sep=""),names(tbl))#
            k=grep(paste("fstat_lm_univariate",variables,sep=""),names(tbl))#
        } else if (variables%in%candGene) {#
            #k=grep(paste("score_lasso",variables,sep=""),names(tbl))#
            k=grep(paste("fstat_lm_univariate",variables,sep=""),names(tbl))#
        }#
        if (length(k)==0) k=2#
        tbl=tbl[order(-tbl[,k]),]#
        colName=c(colnames(tbl)[1],"description","type",colnames(tbl)[2:ncol(tbl)])#
        tbl=cbind(tbl[,1],description="",type="",as.data.frame(tbl[,2:ncol(tbl)],stringsAsFactors=F),stringsAsFactors=F)#
        names(tbl)=colName#
        if (T) {#
            if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
                load(paste0(dirData,"datGeno",dataset,".RData",sep=""))#
                ann2=read.table(paste0(dirData,"HumanExome-12v1-1_A_Gene_Annotation.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                names(ann2)[match(c("Name","Chr","MapInfo","Alleles","Transcript.s.","Gene.s.","in.EXON","Mutation.s."),names(ann2))]=c("id","chr","pos","alleles","transcript","geneSym","inExom","mutation")#
                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(ann2$chr,ann2$pos))#
                varInfo=ann2[i,]#
                varInfo$variable=paste0("X",datObj$ann$id)#
                rm(ann2)#
                k=match(tbl$variable,varInfo$variable); k1=which(!is.na(k)); k2=k[k1]#
                x=sapply(varInfo$geneSym,function(x) {paste(unique(strsplit(x,",")[[1]]),collapse=",")},USE.NAMES=F)#
                tbl$description[k1]=x[k2]#
            } else {#
                varInfo=read.table(paste(dirWork,"../../ctx/pmFat_predT1T2_pilot/royR/20200609/results/","variableInfo_20200508.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                k=match(tbl$variable,varInfo$variable); k1=which(!is.na(k)); k2=k[k1]#
                tbl$description[k1]=varInfo$description[k2]#
                tbl$type[k1]=varInfo$type[k2]#
                #if (variables%in%c("_lfaat1ScaleItems","_univariate_lfaat1ScaleItems","_withLfaat1ScaleItems")) {#
                if (length(grep("ScaleItems",variables))==1) {#
                    colName=c(colnames(tbl)[1:3],"comment",colnames(tbl)[4:ncol(tbl)])#
                    tbl=cbind(tbl[,1:3],comment="",as.data.frame(tbl[,4:ncol(tbl)],stringsAsFactors=F),stringsAsFactors=F)#
                    names(tbl)=colName#
                    k=match(tbl$variable,varInfo1$variable); k1=which(!is.na(k)); k2=k[k1]#
                    tbl$comment[k1]="T1 fatigue scale item"#
                }#
            }#
        } else {#
            #if (variables%in%c("_lfaat1ScaleItems","_univariate_lfaat1ScaleItems","_withLfaat1ScaleItems")) {#
            if (length(grep("ScaleItems",variables))==1) {#
                colName=c(colnames(tbl)[1],"description",colnames(tbl)[2:ncol(tbl)])#
                tbl=cbind(tbl[,1],description="",as.data.frame(tbl[,2:ncol(tbl)],stringsAsFactors=F),stringsAsFactors=F)#
                names(tbl)=colName#
                k=match(tbl$variable,varInfo1$variable); k1=which(!is.na(k)); k2=k[k1]#
                tbl$description[k1]=varInfo1$label[k2]#
            }#
        }#
        rm(varInfo)#
        tbl=cbind(order=1:nrow(tbl),tbl)#
        write.table(tbl,file=paste("variableImportance_",respVarName,respType,variables,fileNameSuffix,".txt",sep=""),col.names=T,row.names=F, sep="\t",quote=F)#
    }#
#
    ## -------------------------------#
    ## -------------------------------#
    ## Variable importance: Association of response variable with top variables#
#
    if (respType=="") {#
        figNoThis=figNoThis+1#
        parThis2=parThis#
        parThis2$cex.main=2; parThis2$cex.lab=1.5#
        parThis2$mar=c(4, 5, 4, 1) + 0.1#
        tbl$name=tbl$variable#
        tbl$name[which(tbl$variable=="lfaat1")]="MLFS1 TS"#
        tbl$name[which(tbl$variable=="lfapt1")]="ELFS1 TS"#
        tbl$name[which(tbl$variable=="newafitott1")]="AFI TS"#
        if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
            x=sapply(tbl$description,function(x) {strsplit(x,",")[[1]][1]},USE.NAMES=F)#
            x[is.na(x)]=""#
            tbl$name=paste(sapply(sub("X","",tbl$variable),function(x) {paste(strsplit(toupper(x),"_")[[1]],collapse=" ")},USE.NAMES=F),x)#
        }#
        #predMethodVecThis=predMethodVec[c(grep(paste0(filtFlag,"|_rf"),predMethodVec))]#
        #if (variables%in%"") {predMethodVecThis=predMethodVec[c(grep(filtFlag,predMethodVec))]} else {predMethodVecThis=predMethodVec[c(grep("_rf",predMethodVec))]}#
        #predMethodVecThis=predMethodVec[c(grep("_lasso",predMethodVec))]#
        predMethodVecThis=predMethodVec[c(grep(predMethodBest,sub(paste0(variables,dataset,dataVersion,filtFlag),paste0(filtFlag,variables,dataset,dataVersion),predMethodVec)))]#
        fName="_enet"#
        fName=paste0("_",predMethodBest)#
        if (variables%in%c("_geno_eQTLGen","_geno_eQTLGen_cis","_geno_eQTLGen_trans")) {#
            predMethodVecThis=predMethodVec[c(grep("_lm_",predMethodVec))]#
            predMethodVecThis=predMethodVec[c(grep(filtFlag,predMethodVec))]#
            fName="_lm_filtPV0.05"#
            fName="_rf"#
            fName="_lm_univariate"#
            predMethodVecThis=predMethodVec[c(grep(fName,predMethodVec))]#
        } else if (variables%in%candGene) {#
            #predMethodVecThis=predMethodVec[c(grep("_lasso",predMethodVec))]#
            predMethodVecThis=predMethodVec[c(grep("_lm_univariate",predMethodVec))]#
            fName="_lm_univariate"#
        }#
        if (length(predMethodVecThis)==0) predMethodVecThis=predMethodVec[1]#
        fName=paste("scatterPlot_",respVarName,"VsTopVariables",respType,fName,variables,fileNameSuffix,sep="")#
        if (figNoFlag) fName=paste("fig",figNoThis,"_",fName,sep="")#
        if (!onePlotFlag) {#
            switch(outputFormat,#
                "pdf"={pdf(paste0(fName,".pdf"))},#
                "png"={png(paste0(fName,"_%1d.png"),res=200,width=4*480,height=4*480)}#
            )#
        }#
        par(mar=parThis2$mar)#
        if (onePlotFlag) par(mfrow=c(3,3)) else par(mfrow=c(3,3))#
        for (predMethod in predMethodVecThis) {#
            if (length(grep("ScaleItems",variables))==1) {#
                dirData=dirDataScaleItem#
                OrganizedFeature=read.table(paste(dirVarScaleItem,"scs_sset",addVariables,"_variable_desciption_Final.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            } else {#
                dirData=dirDataTotal#
                OrganizedFeature=read.csv(paste(dirVarTotal,"scs_sset_variable_desciption_Final_RRedit.csv",sep=""),stringsAsFactors=F)#
            }#
            if (respVarName=="lfaat2") {#
                OrganizedFeature$Continuous=sub("leep","leea",OrganizedFeature$Continuous)#
            }#
            clin=read.table(paste(dirData,"scs_sset_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            if (predMethod%in%c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")) {#
                clin=read.table(paste(dirData,"scs_sset_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                #OrganizedFeature2=read.table(paste(dirData,"varInfo_",respVarName,addVariables,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                OrganizedFeature2=read.table(paste(dirData,"varInfo_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            }#
            varSub=strsplit(variables,"_")[[1]]; if (variables!="") varSub=varSub[varSub!=""]#
            if ("assess"%in%varSub) {#
                for (k in which(names(clin)%in%c("Eosino1","Mono1","Lympho1","Neutro1","wtkg","WBC1","yearsfromdxtostart"))) {#
                    x=clin[,k]#
                    if (any(x<0,na.rm=T)) x=x+min(x,na.rm=T)#
                    if (any(x==0,na.rm=T)) {x1=0.5*min(x[which(x!=0)]); x=x+x1}#
                    x=log2(x)#
                    clin[,k]=x#
                }#
            }#
            if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
                load(paste0(dirData,"datGeno",dataset,".RData",sep=""))#
                ann2=read.table(paste0(dirData,"HumanExome-12v1-1_A_Gene_Annotation.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                names(ann2)[match(c("Name","Chr","MapInfo","Alleles","Transcript.s.","Gene.s.","in.EXON","Mutation.s."),names(ann2))]=c("id","chr","pos","alleles","transcript","geneSym","inExom","mutation")#
                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(ann2$chr,ann2$pos))#
                ann2=ann2[i,]#
                if (variables%in%c("_geno_inflammation")) {#
                    tbl1=read.table(paste0(dirData,"candGene.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    i=which(toupper(ann2$geneSym)%in%toupper(tbl1$geneSym))#
                    rm(tbl1)#
                } else if (variables%in%c("_geno_Wright2017Cytokine")) {#
                    tbl1=read.table(paste0(dirData,"Wright2017Cytokine_assays.txt.assaysForGenes.coords_fromLiftOver_hg19.txt",sep=""), sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T)#
                    tbl1=as.data.frame(t(sapply(tbl1[,1],function(x) {as.integer(strsplit(strsplit(sub("chr","",x),"-")[[1]][1],":")[[1]])},USE.NAMES=F)))#
                    colnames(tbl1)=c("chr","pos")#
                    i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$chr,tbl1$pos))#
                    i=which(!is.na(i))#
                    rm(tbl1)#
                } else if (variables%in%c("_geno_oxytocin","_geno_relaxin")) {#
                    offset=22#
                    fName=dir(dirData,pattern=paste0(sub("_geno","",variables),"_kegg"))#
                    nm=read.table(paste0(dirData,fName,sep=""), sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T,nrow=1)#
                    tbl1=read.table(paste0(dirData,fName,sep=""),sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T,skip=1)#
                    nm=nm[1,1]#
                    x=substr(tbl1[,1],offset,nchar(tbl1[,1]))#
                    geneSym=c()#
                    for (i in 1:length(x)) {#
                        y=strsplit(x[i],";")[[1]][1]#
                        geneSym=c(geneSym,strsplit(y,", ")[[1]])#
                    }#
                    #print(table(toupper(ann2$geneSym)%in%toupper(geneSym)))#
                    i=which(toupper(ann2$geneSym)%in%toupper(geneSym))#
                    rm(offset,fName,tbl1,geneSym)#
                } else if (variables%in%c("_geno_eQTLGen","_geno_eQTLGen_cis","_geno_eQTLGen_trans")) {#
                    if (variables%in%c("_geno_eQTLGen_cis")) {#
                        tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                        i=which(!is.na(i))#
                        rm(tbl1)#
                    } else if (variables%in%c("_geno_eQTLGen_trans")) {#
                        tbl1=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                        i=which(!is.na(i))#
                        rm(tbl1)#
                    } else {#
                        if (F) {#
                            tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                            tbl2=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                            i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                            i1=which(!is.na(i))#
                            i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl2$SNPChr,tbl2$SNPPos))#
                            i2=which(!is.na(i))#
                            i=match(paste(datObj$ann$chr,datObj$ann$pos),c(paste(tbl1$SNPChr,tbl1$SNPPos),paste(tbl2$SNPChr,tbl2$SNPPos)))#
                            i12=which(!is.na(i))#
#
                            cat("\nNo. of loci: total ",nrow(datObj$ann)/2,", cis ",length(i1)/2," (",round(100*length(i1)/nrow(datObj$ann)),"%), trans ",length(i2)/2," (",round(100*length(i2)/nrow(datObj$ann)),"%), cis/trans ",length(i12)/2," (",round(100*length(i1)/nrow(datObj$ann)),"%)\n",sep="")#
                            '#
                            No. of loci: total 21525, cis 14542 (68%), trans 770 (4%), cis/trans 14652 (68%)#
                            '#
                        }#
                        tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        tbl2=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        tbl1=tbl1[,c("SNPChr","SNPPos")]#
                        tbl2=tbl2[,c("SNPChr","SNPPos")]#
                        tbl1=rbind(tbl1,tbl2)#
                        i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                        i=which(!is.na(i))#
                        rm(tbl2,tbl1)#
                    }#
                } else {#
                    i=1:ncol(datObj$geno)#
                }#
                clin=cbind(datObj$phen[,respVarName],as.data.frame(datObj$geno[,i],stringsAsFactors=F),stringsAsFactors=F)#
                nm=c(respVarName,colnames(datObj$geno)[i])#
                names(clin)=nm#
                rm(i,nm,datObj,ann2)#
            } else if ("geno"%in%varSub) {#
                if (length(grep("_geno_addModel",variables))==1) {#
                    if (predMethod%in%c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")) {#
                        load(paste0(dirData,"datGeno_addModel_",respVarName,dataset,"_surrogate.RData",sep=""))#
                    } else {#
                        load(paste0(dirData,"datGeno_addModel_",respVarName,dataset,".RData",sep=""))#
                    }#
                } else {#
                    if (predMethod%in%c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")) {#
                        load(paste0(dirData,"datGeno_",respVarName,dataset,"_surrogate.RData",sep=""))#
                    } else {#
                        load(paste0(dirData,"datGeno_",respVarName,dataset,".RData",sep=""))#
                    }#
                }#
                load(paste0(dirData,"ptid_",respVarName,dataset,".RData"))#
                j=match(ptid,datObj$phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                datAssay=datObj$geno[j2,]#
                clin=clin[j1,]#
                clin=cbind(clin,datAssay,stringsAsFactors=F)#
                rm(datObj); rm(ptid,j,j1,j2)#
            }#
            #if (substr(variables,1,nchar("_mtEpic"))=="_mtEpic") {#
            if ("mtEpic"%in%varSub) {#
                if (exists("training")) rm(training)#
                load(paste0(dirDataMtEpic,"m-values.rda"))#
                datAssay=M#
                rm(M)#
#
                load(paste0(dirDataMtEpic,"phen.MSet.raw.rda"))#
                phen=phen[match(colnames(datAssay),phen$id),]#
                load(paste0(dirDataMtEpic,"ann.MSet.raw.rda"))#
                ann=ann[match(rownames(datAssay),ann$id),]#
                load(paste0(dirDataMtEpic,"pd.RGset.all.rda"))#
                load(paste0(dirDataMtEpic,"sampleName_corSpear0.95_sample_quantnorm_betaValue.rda"))#
                j=match(sampleName,phen$Sample_Name)#
#
                if (length(grep("_mtEpic_chr1to22",variables))==1) {#
                    i=which(ann$chr%in%1:22)#
                    i=i[order(ann$chr[i],ann$pos[i])]#
                } else {#
                    i=NULL#
                }#
                phen=phen[j,]#
                if (substr(variables,1,nchar("_mtEpicSam"))=="_mtEpicSam") {#
                    rm(datAssay)#
                    j=match(clin$ptid,phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                    rm(phen)#
                    clin=clin[j1,]#
                } else {#
                    datAssay=datAssay[i,j]#
#
                    j=match(clin$ptid,phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                    rm(phen)#
                    datAssay=datAssay[,j2]#
                    clin=clin[j1,]#
                    datAssay=t(datAssay)#
#
                    nm=NULL#
                    if (mtEpicFlag=="coMethDMR") {#
                    } else if (mtEpicFlag=="pca") {#
                        if (T) {#
                            x1=matrix(nrow=nrow(clin),ncol=nPC); nm=c(names(clin),paste0("mtEpic_pc",1:nPC))#
                            if (respVarName%in%c("lfaat2","lfapt2")) {#
                                load(paste0(dirDataMtEpic,"pcMat_",respVarName,"_none_pca_mtEpic_chr1to22_pcaN5_20220320_seed1.RData"))#
                                x1=pcMat[match(paste0("X",clin$ptid),rownames(pcMat)),paste0("mtEpic_pc",1:nPC)]#
                                rm(pcMat)#
                            }#
                            clin=cbind(clin,x1,stringsAsFactors=F)#
                            names(clin)=nm#
                            rm(x1)#
                        } else {#
                            x1=matrix(nrow=nrow(clin),ncol=nPC); nm=c(names(clin),paste0("mtEpic_pc",1:nPC))#
                            clin=cbind(clin,x1,stringsAsFactors=F)#
                            names(clin)=nm#
                            rm(x1)#
                        }#
                    } else {#
                        clin=cbind(clin,datAssay,stringsAsFactors=F)#
                    }#
                    rm(nm,datAssay)#
                }#
            }#
#
            x=strsplit(predMethod,"_")[[1]]#
            if (!scaleVarName%in%x) {#
                fName1=predMethod#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                res$predMethod=sub("none_","",predMethod)#
                if ("impOverall"%in%names(res$varImp)) {#
                    if (length(grep("_lm_univariate",predMethod))==1) {#
                        colName="fstat"#
                        res$varOrderNameShort="F-stat"#
                        tbl2=read.table(paste0(dirWork,"royR/univariate/stat_",respVarName,respType,"_lm_univariate_geno",dataset,".txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        res$varImp$Overall=res$varImp$fstat=tbl2$fstat[match(res$varImp$variable,tbl2$id)]#
                    } else {#
                        colName=res$varOrderNameShort="score"#
                        res$varImp$Overall=res$varImp$impOverall#
                    }#
                } else {#
                    colName=res$varOrderNameShort="proportion"#
                    res$varImp$Overall=res$varImp$propOverall#
                }#
                thres=0#
                if (length(grep("rf",predMethod))==1) thres=2.5#
                if (length(grep("rpart",predMethod))==1) thres=1#
#
                colName=paste(colName,"_",res$predMethod,sep="")#
                #methodName=paste(variablesNameShort,": ",res$methodNameShort," ",res$varOrderNameShort,sep="")#
                #methodName=capWords(paste(res$methodNameShort," ",res$varOrderNameShort,sep=""))#
                methodName=capWords(paste(res$varOrderNameShort,sep=""))#
                ind=order(-tbl[,colName]); ind=ind[which(tbl[ind,colName]>thres)]#
                ind=ind[1:min(length(ind),18)]#
                if (any(!is.na(ind))) {#
                    for (k in ind) {#
                        header=paste0(methodName,": ",round(tbl[k,colName],2))#
                        if (all(is.na(clin[,tbl$variable[k]]))) {#
                            plot(1,1,main=header,xlab=tbl$name[k],ylab=respVarNameShort,cex=parThis2$cex,pch=parThis2$pch,cex.main=parThis2$cex.main,cex.lab=parThis2$cex.lab,type="n")#
                        } else {#
                            if (tbl$variable[k]%in%OrganizedFeature$categorical | variables%in%c("_geno",candGene)) {#
                                nm=table(clin[,tbl$variable[k]])#
                                nm=paste0(names(nm)," (",nm,")")#
                                boxplot(clin[,respVarName]~clin[,tbl$variable[k]],names=nm,main=header,xlab=tbl$name[k],ylab=respVarNameShort,cex=parThis2$cex,pch=parThis2$pch,cex.main=parThis2$cex.main,cex.lab=parThis2$cex.lab)#
                            } else {#
                                plot(clin[,tbl$variable[k]],clin[,respVarName],main=header,xlab=tbl$name[k],ylab=respVarNameShort,cex=parThis2$cex,pch=parThis2$pch,cex.main=parThis2$cex.main,cex.lab=parThis2$cex.lab)#
                                if (drawLine$type=="loess") {#
                                    #fit=lm(clin[,tbl$variable[k]]~clin[,respVarName])#
                                    #abline(c(fit$coef),lty="dashed",col="red")#
                                    fit=loess(clin[,respVarName]~clin[,tbl$variable[k]],span=drawLine$span)#
                                    j=order(fit$x)#
                                    lines(fit$x[j],fit$fitted[j],col="red",lwd=2)#
                                }#
                            }#
                        }#
                    }#
                }#
            }#
        }#
        if (!onePlotFlag) dev.off()#
        ## -------------------------------#
        ## -------------------------------#
        ## Plot all predictor variables against response variable#
        varSub=strsplit(variables,"_")[[1]]; if (variables!="") varSub=varSub[varSub!=""]#
        if ("assess"%in%varSub) {#
            colName=paste0("score_lm",variables,dataset,dataVersion)#
            fName=paste0("_lm")#
            fName=paste("scatterPlot_",respVarName,"VsAllVariables",respType,fName,variables,fileNameSuffix,sep="")#
            if (figNoFlag) fName=paste("fig",figNoThis,"_",fName,sep="")#
            pdf(paste0(fName,".pdf"))#
            par(mfrow=c(3,3))#
            out=matrix(nrow=nrow(tbl),ncol=2)#
            for (k in 1:nrow(tbl)) {#
                out[k,]=unlist(anova(lm(clin[,respVarName]~clin[,tbl$variable[k]]))[1,4:5])#
            }#
            ind=order(out[,2])#
            if (any(!is.na(ind))) {#
                for (k in ind) {#
                    header=out[k,]#
                    header=paste0("Fstat ",round(header[1],2),", pv ",signif(header[2],2))#
                    if (all(is.na(clin[,tbl$variable[k]]))) {#
                        plot(1,1,main=header,xlab=tbl$name[k],ylab=respVarNameShort,cex=parThis2$cex,pch=parThis2$pch,cex.main=1.5,cex.lab=parThis2$cex.lab,type="n")#
                    } else {#
                        if (tbl$variable[k]%in%OrganizedFeature$categorical | variables%in%c("_geno",candGene)) {#
                            nm=table(clin[,tbl$variable[k]])#
                            nm=paste0(names(nm)," (",nm,")")#
                            boxplot(clin[,respVarName]~clin[,tbl$variable[k]],names=nm,main=header,xlab=tbl$name[k],ylab=respVarNameShort,cex=parThis2$cex,pch=parThis2$pch,cex.main=1.5,cex.lab=parThis2$cex.lab)#
                        } else {#
                            plot(clin[,tbl$variable[k]],clin[,respVarName],main=header,xlab=tbl$name[k],ylab=respVarNameShort,cex=parThis2$cex,pch=parThis2$pch,cex.main=1.5,cex.lab=parThis2$cex.lab)#
                            if (drawLine$type=="loess") {#
                                #abline(lm(clin[,respVarName]~clin[,tbl$variable[k]]),col="red")#
                                fit=loess(clin[,respVarName]~clin[,tbl$variable[k]],span=drawLine$span)#
                                j=order(fit$x)#
                                lines(fit$x[j],fit$fitted[j],col="red",lwd=2)#
                            }#
                        }#
                    }#
                }#
            }#
            dev.off()#
        }#
    }#
    ## -------------------------------#
    ## -------------------------------#
#
    if (onePlotFlag) dev.off()#
#
}#
save.image(paste0("tmp_",respVarName,respType,".RData"))#
#
}#
#
#########################################################
#########################################################
## Modify scratch data info#
#
if (F) {#
    methodNameShort="Neural Network (Adam)"#
    varList=c("lfaat2_none_neuralNetS_assess_mtEpicSam","lfaat2_none_neuralNetS_assess_leea5t1_leea12t1_mtEpicSam","lfaat2_none_neuralNetS_assess_mtEpic_chr1to22_pcaN1","lfaat2_none_neuralNetS_assess_leea5t1_leea12t1_mtEpic_chr1to22_pcaN1")#
    methodNameShort="Neural Network (RMSProp)"#
    varList=c("lfaat2_none_neuralNetNS_assess_mtEpicSam","lfaat2_none_neuralNetNS_assess_leea5t1_leea12t1_mtEpicSam","lfaat2_none_neuralNetNS_assess_mtEpic_chr1to22_pcaN1","lfaat2_none_neuralNetNS_assess_leea5t1_leea12t1_mtEpic_chr1to22_pcaN1")#
    dirData="scratch/"#
    for (variables in varList) {#
        fName=paste0("res_",variables,"_20220320.RData")#
        load(paste0(dirData,fName))#
        res$methodNameShort=methodNameShort#
        print(res$methodNameShort)#
        save(res,file=fName)#
    }#
}
## Kord Kober Fatique Omics project#
## Analysis of predictions#
#
## -------------------------------#
## Arguments#
## computerName = c("pnldev","test")#
## onePlotFlag. onePlotFlag=T means all figures are plotted in one pdf file#
## saveScratchData. Set saveScratchData=T to generate temporary files to make plots and tables#
#
## -------------------------------#
#
## -------------------------------#
## -------------------------------#
## Set parameters#
#
computerName="pnldev"#
computerName="test"#
#
fileNameSuffix="_iter16"#
fileNameSuffix="_iter18"#
#
saveScratchData=F#
saveScratchData=T#
#
respVarName="newafitott6"#
respVarNameShort="AFI6 TS"#
dataset=""#
#
respVarName="newafitott2"#
respVarNameShort="AFI2 TS"#
dataset=""#
#
respVarName="lfapt6"#
respVarNameShort="ELFS6 TS"#
dataset=""#
#
respVarName="lfaat6"#
respVarNameShort="MLFS6 TS"#
dataset=""#
#
respVarName="lfaat2"#
respVarNameShort="MLFS2 TS"#
dataset="_set1"#
dataset=""#
#
respVarName="lfapt2"#
respVarNameShort="ELFS2 TS"#
dataset=""#
#
predVarName="Clinical"#
predVarName="Assessable"#
#
fNameInSuffix="_seed1_1000"#
fNameInSuffix="_seed1"#
#
respType="_catResp"#
respType=""#
#
respVarVec=c("lfaat2","lfaat6","lfapt2","lfapt6","newafitott2","newafitott6")#
respVarVec=c("lfaat2")#
respVarVec=c("lfaat2","lfapt2")#
#
for (respVarName in respVarVec) {#
    cat("\n\n################ ",respVarName,respType,"\n",sep="")#
    switch(respVarName,#
        "newafitott6"={#
            respVarNameShort="AFI6 TS"#
        },#
        "newafitott2"={#
            respVarNameShort="AFI2 TS"#
        },#
        "lfapt6"={#
            respVarNameShort="ELFS6 TS"#
        },#
        "lfapt2"={#
            respVarNameShort="ELFS2 TS"#
        },#
        "lfaat6"={#
            respVarNameShort="MLFS6 TS"#
        },#
        "lfaat2"={#
            respVarNameShort="MLFS2 TS"#
        }#
    )#
## -------------------------------#
## -------------------------------#
#
if (computerName=="pnldev") {#
    setwd(paste0("/songlab/proj/cbi/fatigueOmics/prediction/",respVarName,"/",iteration))#
    dirWork=""#
    dirSource=paste("code/",sep="")#
    dirDataMtEpic="/songlab/proj/cbi/SCS_MtEpicArray_2021_n960/royR/process_scs_mtEpicArray/data/"#
} else {#
    if (respVarName%in%c("lfaat2","lfaat6","newafitott2","newafitott6")) {#
        setwd("/Users/royr/UCSF/koberK/fatigueOmics/")#
        dirWork="SCS_AmFatigue_predT1T2/"#
        dirSource=paste("code/",sep="")#
    } else {#
        setwd("/Users/royr/UCSF/koberK/ctx/")#
        dirWork="pmFat_predT1T2_pilot/"#
        dirSource=paste("../fatigueOmics/code/",sep="")#
    }#
    dirDataMtEpic="../scs_mtEpicArray/SCS_MtEpicArray_2021_n960/royR/process_scs_mtEpicArray/data/"#
}#
#
#suppressPackageStartupMessages()#
#
## -------------------------------#
## -------------------------------#
#
source(paste(dirSource,"functions.R",sep=""))#
#
scaleVarName=sub("2","1",respVarName)#
variablesNameLong=variablesNameShort=NULL#
#
## ----------------------------#
## Geno candidate genes#
filtFlag="_filtPV0.05"#
#
variablesVec="_geno_inflammation"#
iteration=20210113#
#
variablesVec="_geno_Wright2017Cytokine"#
iteration="Wright2017Cytokine"#
#
variablesVec=c("_geno_oxytocin","_geno_relaxin")#
iteration="oxytocin_relaxin"#
#
variablesVec=c("_geno_eQTLGen_trans")#
iteration="eQTL"#
## ----------------------------#
#
## Geno#
variablesVec="_geno"#
filtFlag="_filtPV0.0002"#
iteration=20201228#
iteration=20210106#
#
## Clinical#
variablesVec=paste0("_with",capWords(scaleVarName),"ScaleItems")#
variablesVec=c("_combined")#
variablesVec=""#
variablesVec=c("",paste0("_with",capWords(scaleVarName),"ScaleItems"))#
filtFlag="_filtPV0.05"#
iteration=20201110#
if (respVarName%in%c("lfaat2","lfaat6","newafitott2","newafitott6") & dataset=="") iteration=20210303 else iteration=20210127#
#
## Clinical + mtEpic#
iteration=20201110#
if (respVarName%in%c("lfaat2","lfaat6","newafitott2","newafitott6") & dataset=="") iteration=20210303 else iteration=20210127#
variablesVec=""#
variablesVec=paste0("",rep(paste0("_mtEpic_chr1to22",c("_pca","")),each=length(variablesVec)))#
variablesVec=paste0("",rep(paste0("_mtEpicOnly_chr1to22",c("")),each=length(variablesVec)))#
variablesVec=paste0("",rep(paste0("_mtEpic_chr1to22",c("")),each=length(variablesVec)))#
variablesVec=paste0("",rep(paste0("_mtEpicOnly_chr1to22",c("_pcaN5")),each=length(variablesVec)))#
variablesVec=paste0("",rep(paste0("_mtEpic_chr1to22",c("_pcaN5")),each=length(variablesVec)))#
variablesVec=paste0("",rep(paste0("_mtEpic_chr1to22",c("_pcaN1")),each=length(variablesVec)))#
variablesVec=""; iteration="clin_nRep10"#
variablesVec="_mtEpicSam_lfaat1"; iteration="clin_nRep10"#
variablesVec="_mtEpicSam_noLfaat1"; iteration="clin_nRep10"#
variablesVec="_mtEpicSam"; iteration="clin_nRep10"#
variablesVec="_assess_mtEpicSam"; iteration="clin_nRep10"#
variablesVec=c("_assess_mtEpicSam","_assess_leep5t1_mtEpicSam","_assess_leep12t1_mtEpicSam","_assess_leep5t1_leep12t1_mtEpicSam"); iteration="clin_nRep10"#
variablesVec=c("_assess_mtEpicSam","_assess_leep5t1_leep12t1_mtEpicSam"); iteration="clin_nRep3"#
variablesVec=c("_assess_geno_addModel","_assess_leep5t1_leep12t1_geno_addModel"); iteration="geno"#
variablesVec=c("_assess_geno_addModel"); iteration="geno"#
variablesVec=c("_assess_mtEpic_chr1to22_pcaN1","_assess_leep5t1_leep12t1_mtEpic_chr1to22_pcaN1"); iteration="mtEpic"#
variablesVec=c("_assess","_assess_leep5t1_leep12t1"); iteration="assess_clin_nRep1000"#
filtFlag="_filtPV0.05"#
if (length(grep("_mtEpicSam",variablesVec))!=0) iteration="clin_nRep3"#
if (length(grep("_mtEpic",variablesVec))!=0) iteration="mtEpic_nRep3"#
if (length(grep("_mtEpic",variablesVec))!=0) iteration="mtEpic"#
if (length(grep("_mtEpicSam",variablesVec))!=0) iteration="clin_nRep10"#
#
#variablesVec=c("_combined")#
#
## ----------------------------#
#
dataVersion=""#
dataVersion="_20200508"#
dataVersion="_20220320"#
#
onePlotFlag=T#
onePlotFlag=F#
#
outputFormat="pdf"#
outputFormat="png"#
#
drawLine=list(type="")#
drawLine=list(type="loess",span=.25)#
#
dispNoOfRepFlag=T#
dispNoOfRepFlag=F#
#
figNoFlag=T#
figNoFlag=F#
#
## -------------------------------#
## -------------------------------#
candGene=c("_geno_inflammation","_geno_Wright2017Cytokine","_geno_oxytocin","_geno_relaxin","_geno_eQTLGen","_geno_eQTLGen_cis","_geno_eQTLGen_trans")#
#candGene=paste0(c("","_withLfaat1ScaleItems"),rep(paste0("_mtEpic_chr1to22",c("_pca","")),each=2))#
#
for (variables in variablesVec) {#
    if (respVarName=="lfaat2") variables=gsub("leep","leea",variables)#
    cat("\n\n-------------- ",variables,"\n",sep="")#
#
    #if (dataVersion%in%c("_20200508","")) dirResult=paste0(dirWork,"royR/20201110/results/")#
    dirResult=paste0(dirWork,"royR/",iteration,"/results/")#
#
    addVariables=""#
    switch(respVarName,#
        "lfaat2"={#
            if (variables=="_withLfaat1ScaleItems") {#
                variablesNameLong="With time 2 morning fatigue scale items"#
                variablesNameShort="With MLFS Scale Items at T2"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 2 morning fatigue score"#
                variablesNameShort="With MLFS at T2"#
            }#
        },#
        "lfaat6"={#
            if (variables=="_withLfaat1ScaleItems") {#
                variablesNameLong="With time 6 morning fatigue scale items"#
                variablesNameShort="With MLFS Scale Items at T6"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 6 morning fatigue score"#
                variablesNameShort="With MLFS at T6"#
            }#
        },#
        "lfapt2"={#
            if (variables=="_withLfapt1ScaleItems") {#
                variablesNameLong="With time 2 evening fatigue scale items"#
                variablesNameShort="With ELFS Scale Items at T2"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 2 evening fatigue score"#
                variablesNameShort="With ELFS at T2"#
            }#
        },#
        "lfapt6"={#
            if (variables=="_withLfapt1ScaleItems") {#
                variablesNameLong="With time 6 evening fatigue scale items"#
                variablesNameShort="With ELFS Scale Items at T6"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 6 evening fatigue score"#
                variablesNameShort="With ELFS at T6"#
            }#
        },#
        "newafitott2"={#
            if (variables=="_withAfi1ScaleItems") {#
                variablesNameLong="With time 2 cognitive fatigue scale items"#
                variablesNameShort="With AFI Scale Items at T2"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 2 cognitive fatigue score"#
                variablesNameShort="With AFI at T2"#
            }#
        },#
        "newafitott6"={#
            if (variables=="_withAfi1ScaleItems") {#
                variablesNameLong="With time 6 cognitive fatigue scale items"#
                variablesNameShort="With AFI Scale Items at T6"#
                addVariables="_withFatiqueScaleItems"#
            } else {#
                variablesNameLong="With total time 6 cognitive fatigue score"#
                variablesNameShort="With AFI at T6"#
            }#
        }#
    )#
    varSub=strsplit(variables,"_")[[1]]; if (variables!="") varSub=varSub[varSub!=""]#
    if (any(c("leea5t1","leea12t1","leep5t1","leep12t1")%in%varSub) | length(grep("ScaleItem",variables))==1) {#
        addVariables="_withFatiqueScaleItems"#
    } else {#
        addVariables=""#
    }#
#
    if (F) {#
        predMethodVec=c()#
        predMethodVec=c("none_null","none_lm",paste0("none_lm",filtFlag),"none_rpart1se","none_neuralNet")#
        tmp=paste0("none_rf_mtry",c(2,3,4))#
        predMethodVec=c(predMethodVec,tmp)#
        param=data.frame(degree=1:3,scale=1,C=1)#
        tmp=paste0("none_svmPoly_degree",param$degree,"scale",param$scale,"C",param$C)#
        predMethodVec=c(predMethodVec,tmp)#
        param=data.frame(alpha=rep(1,3),lambda=c(0.0014,0.0137,0.1372))#
        tmp=paste0("none_lasso_alpha",param$alpha,"lambda",param$lambda)#
        predMethodVec=c(predMethodVec,tmp)#
        param=data.frame(alpha=rep(c(0.25,0.50,0.75),each=3),lambda=c(0.0014,0.0137,0.1372))#
        tmp=paste0("none_enet_alpha",param$alpha,"lambda",param$lambda)#
        predMethodVec=c(predMethodVec,tmp)#
#
        predMethodVec=c()#
        param=data.frame(alpha=rep(1,3),lambda=c(0.0014,0.0137,0.1372))#
        tmp=paste0("none_lasso_alpha",param$alpha,"lambda",param$lambda)#
        predMethodVec=c(predMethodVec,tmp)#
        param=data.frame(alpha=rep(c(0.25,0.50,0.75),each=3),lambda=c(0.0014,0.0137,0.1372))#
        tmp=paste0("none_enet_alpha",param$alpha,"lambda",param$lambda)#
        predMethodVec=c(predMethodVec,tmp)#
    }#
    predMethodVec=c("none_lm_univariate")#
    predMethodVec=c("none_null","none_lm",paste0("none_lm",filtFlag),"none_rpart1se","none_rf","none_svmPoly","none_lasso","none_enet","none_neuralNet")#
    predMethodVec=c("none_lm",paste0("none_lm",filtFlag),"none_rpart1se","none_lasso","none_enet")#
    predMethodVec=c("none_null",none_lm"none_lm",paste0("none_lm",filtFlag),"none_rpart1se","none_lasso","none_enet")#
#
    #predMethodVec=paste0(predMethodVec,sub("_combined","",variables),dataset,dataVersion)#
    predMethodVec=paste0(predMethodVec,variables,dataset,dataVersion)#
    predMethodVec=sub(paste0(filtFlag,variables,dataset,dataVersion),paste0(variables,dataset,dataVersion,filtFlag),predMethodVec)#
    #if (length(variablesVec)==1 & variablesVec[1]=="_combined") predMethodVec=sub("_combined","_assess",predMethodVec)#
#
    #########################################################
    #########################################################
#
    if (onePlotFlag) {#
        switch(outputFormat,#
            "pdf"={#
                pdf(paste("predictionPerformance",variables,fileNameSuffix,".pdf",sep=""))#
            },#
            "png"={#
                png(paste("predictionPerformance",variables,fileNameSuffix,"_%1d.png",sep=""))#
            }#
        )#
    }#
#
    dirThis="scratch"#
    if (!file.exists(dirThis)) dir.create(file.path(dirThis))#
    dirScratch=paste(dirThis,"/",sep="")#
    rm(dirThis)#
#
    ## -------------------------------#
    ## -------------------------------#
#
    dirVarTotal=dirVarScaleItem="../fatigueOmics/SCS_AmFatigue_predT1T2/royR/data/"#
    dirDataTotal=dirDataScaleItem="../fatigueOmics/SCS_AmFatigue_predT1T2/royR/data/"#
    if (iteration%in%c("20210303")) {#
        dirVarTotal=dirVarScaleItem="../fatigueOmics/SCS_AmFatigue_predT1T2/royR/data/meanAndScaleItems/"#
        dirDataTotal=dirDataScaleItem="../fatigueOmics/SCS_AmFatigue_predT1T2/royR/data/meanAndScaleItems/"#
    }#
    if (F) {#
        if (respVarName%in%c("lfaat2","lfaat6","newafitott2","newafitott6")) {#
            dirVarTotal=paste(dirWork,"royR/data/",sep="")#
            dirVarScaleItem=paste(dirWork,"royR/data/",sep="")#
        } else {#
            dirVarTotal=paste(dirWork,"royR/20200115/data/",sep="")#
            dirVarScaleItem=paste(dirWork,"royR/20200228/data/",sep="")#
        }#
        if (dataVersion=="_20200508") {#
            if (respVarName%in%c("lfaat2","lfaat6","newafitott2","newafitott6")) {#
                dirDataTotal=dirDataScaleItem=paste(dirWork,"royR/data/",sep="")#
            } else {#
                dirDataTotal=dirDataScaleItem=paste(dirWork,"royR/20200518/data/",sep="")#
            }#
        } else if (dataVersion=="") {#
            dirDataTotal=paste(dirWork,"royR/20201028/data/",sep="")#
            dirDataScaleItem=paste(dirWork,"royR/20201028/data/",sep="")#
        }#
    }#
    if (length(grep("ScaleItems",variables))==1) {dirData=dirDataScaleItem} else {dirData=dirDataTotal}#
#
    if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
        load(paste0(dirData,"datGeno",dataset,".RData",sep=""))#
        ann2=read.table(paste0(dirData,"HumanExome-12v1-1_A_Gene_Annotation.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
        names(ann2)[match(c("Name","Chr","MapInfo","Alleles","Transcript.s.","Gene.s.","in.EXON","Mutation.s."),names(ann2))]=c("id","chr","pos","alleles","transcript","geneSym","inExom","mutation")#
        i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(ann2$chr,ann2$pos))#
        ann2=ann2[i,]#
        if (variables%in%c("_geno_inflammation")) {#
            tbl1=read.table(paste0(dirData,"candGene.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            i=which(toupper(ann2$geneSym)%in%toupper(tbl1$geneSym))#
            rm(tbl1)#
        } else if (variables%in%c("_geno_Wright2017Cytokine")) {#
            tbl1=read.table(paste0(dirData,"Wright2017Cytokine_assays.txt.assaysForGenes.coords_fromLiftOver_hg19.txt",sep=""), sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T)#
            tbl1=as.data.frame(t(sapply(tbl1[,1],function(x) {as.integer(strsplit(strsplit(sub("chr","",x),"-")[[1]][1],":")[[1]])},USE.NAMES=F)))#
            colnames(tbl1)=c("chr","pos")#
            i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$chr,tbl1$pos))#
            i=which(!is.na(i))#
            rm(tbl1)#
        } else if (variables%in%c("_geno_oxytocin","_geno_relaxin")) {#
            offset=22#
            fName=dir(dirData,pattern=paste0(sub("_geno","",variables),"_kegg"))#
            nm=read.table(paste0(dirData,fName,sep=""), sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T,nrow=1)#
            tbl1=read.table(paste0(dirData,fName,sep=""),sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T,skip=1)#
            nm=nm[1,1]#
            x=substr(tbl1[,1],offset,nchar(tbl1[,1]))#
            geneSym=c()#
            for (i in 1:length(x)) {#
                y=strsplit(x[i],";")[[1]][1]#
                geneSym=c(geneSym,strsplit(y,", ")[[1]])#
            }#
            #print(table(toupper(ann2$geneSym)%in%toupper(geneSym)))#
            i=which(toupper(ann2$geneSym)%in%toupper(geneSym))#
            rm(offset,fName,tbl1,geneSym)#
        } else if (variables%in%c("_geno_eQTLGen","_geno_eQTLGen_cis","_geno_eQTLGen_trans")) {#
            if (variables%in%c("_geno_eQTLGen_cis")) {#
                tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                i=which(!is.na(i))#
                rm(tbl1)#
            } else if (variables%in%c("_geno_eQTLGen_trans")) {#
                tbl1=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                i=which(!is.na(i))#
                rm(tbl1)#
            } else {#
                if (F) {#
                    tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    tbl2=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                    i1=which(!is.na(i))#
                    i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl2$SNPChr,tbl2$SNPPos))#
                    i2=which(!is.na(i))#
                    i=match(paste(datObj$ann$chr,datObj$ann$pos),c(paste(tbl1$SNPChr,tbl1$SNPPos),paste(tbl2$SNPChr,tbl2$SNPPos)))#
                    i12=which(!is.na(i))#
#
                    cat("\nNo. of loci: total ",nrow(datObj$ann)/2,", cis ",length(i1)/2," (",round(100*length(i1)/nrow(datObj$ann)),"%), trans ",length(i2)/2," (",round(100*length(i2)/nrow(datObj$ann)),"%), cis/trans ",length(i12)/2," (",round(100*length(i1)/nrow(datObj$ann)),"%)\n",sep="")#
                    '#
                    No. of loci: total 21525, cis 14542 (68%), trans 770 (4%), cis/trans 14652 (68%)#
                    '#
                }#
                tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                tbl2=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                tbl1=tbl1[,c("SNPChr","SNPPos")]#
                tbl2=tbl2[,c("SNPChr","SNPPos")]#
                tbl1=rbind(tbl1,tbl2)#
                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                i=which(!is.na(i))#
                rm(tbl2,tbl1)#
            }#
        } else {#
            i=1:ncol(datObj$geno)#
        }#
        training=cbind(datObj$phen[,respVarName],as.data.frame(datObj$geno[,i],stringsAsFactors=F),stringsAsFactors=F)#
        nm=c(respVarName,colnames(datObj$geno)[i])#
        names(training)=nm#
        rm(i,nm,datObj,ann2)#
    } else {#
        load(paste0(dirData,"training_",respVarName,addVariables,dataset,dataVersion,".RData"))#
        load(paste0(dirData,"ptid_",respVarName,dataset,".RData"))#
        rownames(training)=paste0("X",ptid); rm(ptid)#
        varSub=strsplit(variables,"_")[[1]]; if (variables!="") varSub=varSub[varSub!=""]#
        varList=c("leea5t1","leea12t1","leep5t1","leep12t1")#
        varList=varList[which(varList%in%varSub)]#
        if ("assess"%in%varSub) {#
            load(paste(dirData,"training_",respVarName,addVariables,dataset,dataVersion,".RData",sep=""))#
            load(paste0(dirData,"ptid_",respVarName,dataset,".RData"))#
            rownames(training)=paste0("X",ptid); rm(ptid)#
            varInfo1=data.frame(surrogate=names(training),variable=names(training),stringsAsFactors=F)#
            varInfo=read.table(paste0(dirData,"predictorList_withVariablesToExclude.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            x=c(respVarName,varList,varInfo$variable[which(varInfo$assessableStatus=="assessable")])#
            training=training[,which(varInfo1$variable%in%x)]#
        }#
        if (length(grep(paste0("_no",capWords(scaleVarName)),variables))==1) {#
            training=training[,which(names(training)!=scaleVarName)]#
        } else if (variables%in%paste0(c("_","_univariate_"),scaleVarName,"ScaleItems")) {#
            varInfo=read.table(paste(dirVarScaleItem,"scs.t1.scale.variable.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            varInfo=varInfo[which(varInfo$metaVariable=="Fatigue Scale Items"),]#
            training=training[,which(names(training)%in%c(respVarName,varInfo$variable))]#
            varInfo1=varInfo#
            rm(varInfo)#
        } else if (variables%in%c(paste0("_with",capWords(scaleVarName),"ScaleItems"))) {#
            varInfo=read.table(paste(dirVarScaleItem,"scs.t1.scale.variable.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            varInfo=varInfo[which(varInfo$metaVariable=="Fatigue Scale Items"),]#
            training=training[,which(!names(training)%in%c(scaleVarName))]#
            varInfo1=varInfo#
            rm(varInfo)#
        }#
        if ("geno"%in%varSub) {#
            if (length(grep("_geno_addModel",variables))==1) {#
                load(paste0(dirData,"datGeno_addModel_",respVarName,dataset,".RData",sep=""))#
            } else {#
                load(paste0(dirData,"datGeno_",respVarName,dataset,".RData",sep=""))#
            }#
            load(paste0(dirData,"ptid_",respVarName,dataset,".RData"))#
            j=match(ptid,datObj$phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
            datAssay=datObj$geno[j2,]#
            training=training[j1,]#
            training=cbind(training,datAssay,stringsAsFactors=F)#
            rm(datObj); rm(ptid,j,j1,j2)#
        } else if (length(grep("_mtEpic",variables))==1) {#
            varSub=NULL#
            mtEpicFlag=""#
            x=strsplit(variables,"_")[[1]]; k=which(x%in%c("mtEpic","mtEpicOnly"))#
            if (length(k)!=0) {#
                varSub=paste0("_",paste(x[k+(0:1)],collapse="_"))#
                if (length(x)>(k+1)) {#
                    if ("pca"%in%substr(x,1,nchar("pca"))) {mtEpicFlag="pca"; nPC=5#
                    } else if ("coMethDMR"%in%x) {mtEpicFlag="coMethDMR"}#
                }#
            } else if ("mtEpicSam"%in%x) {#
                varSub="mtEpicSam"#
            }#
#
            load(paste0(dirDataMtEpic,"m-values.rda"))#
            datAssay=M#
            rm(M)#
#
            load(paste0(dirDataMtEpic,"phen.MSet.raw.rda"))#
            phen=phen[match(colnames(datAssay),phen$id),]#
            load(paste0(dirDataMtEpic,"ann.MSet.raw.rda"))#
            ann=ann[match(rownames(datAssay),ann$id),]#
            load(paste0(dirDataMtEpic,"pd.RGset.all.rda"))#
            load(paste0(dirDataMtEpic,"sampleName_corSpear0.95_sample_quantnorm_betaValue.rda"))#
            j=match(sampleName,phen$Sample_Name)#
#
            if (length(grep("_mtEpic_chr1to22",variables))==1) {#
                i=which(ann$chr%in%1:22)#
                i=i[order(ann$chr[i],ann$pos[i])]#
            } else {#
                i=NULL#
            }#
            phen=phen[j,]#
            if (varSub=="mtEpicSam") {#
                rm(datAssay)#
                load(paste0(dirData,"ptid_",respVarName,".RData"))#
                j=match(ptid,phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                rm(phen)#
                training=training[j1,]#
            } else {#
                datAssay=datAssay[i,j]#
#
                load(paste0(dirData,"ptid_",respVarName,".RData"))#
                j=match(ptid,phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                rm(phen)#
                ptid=ptid[j1]#
                datAssay=datAssay[,j2]#
                training=training[j1,]#
                datAssay=t(datAssay)#
#
                nm=NULL#
                #load(paste0(dirData,"training_",respVarName,addVariables,dataset,dataVersion,".RData"))#
                #load(paste0(dirData,"ptid_",respVarName,addVariables,dataset,dataVersion,".RData"))#
                #rownames(training)=paste0("X",ptid); rm(ptid)#
                if (mtEpicFlag=="coMethDMR") {#
                    load(paste0("reg_coMethDMR",varSub,".RData"))#
                    regName=sub(":","_",sub("-","_",names(reg)))#
#
                    nm=sub(":","_",sub("-","_",names(reg)))#
                    varImpCaretMat=matrix(nrow=ncol(datClin)-1+length(reg),ncol=nFold*nRep*nrow(param),dimnames=list(c(colnames(datClin)[-respVarId],nm),tmp))#
                    fName=paste0("lmmTestAllRegions_",respVarName,platform,"_",predMethod,variables,dataset,dataVersion,fName2,"_log.txt")#
                } else if (mtEpicFlag=="pca") {#
                    if (T) {#
                        x1=matrix(nrow=nrow(training),ncol=nPC); nm=c(names(training),paste0("mtEpic_pc",1:nPC))#
                        if (respVarName%in%c("lfaat2","lfapt2")) {#
                            load(paste0(dirDataMtEpic,"pcMat_",respVarName,"_none_pca_mtEpic_chr1to22_pcaN5_20220320_seed1.RData"))#
                            x1=pcMat[match(paste0("X",ptid),rownames(pcMat)),paste0("mtEpic_pc",1:nPC)]#
                            rm(pcMat)#
                        }#
                        training=cbind(training,x1,stringsAsFactors=F)#
                        names(training)=nm#
                        rm(x1)#
                    }#
                } else {#
                    training=cbind(training,datAssay,stringsAsFactors=F)#
                }#
                rm(nm,datAssay)#
            }#
        }#
    }#
#
    cat("No. of patients with non-missing fatique score: ",nrow(training),"\n",sep="")#
    # No. of patients with non-missing fatique score: 1217#
#
    if (F) {#
        if (!onePlotFlag) pdf(paste("predictionPerformance_",respVarName,respType,variables,fileNameSuffix,".pdf",sep=""))#
        par(mfrow=c(1,1))#
        hist(training[,respVarName],main=paste("No. of patients with non-missing fatique score: ",nrow(training),sep=""),xlab=respVarName,breaks=100)#
        if (!onePlotFlag) dev.off()#
    }#
#
    ## -------------------------------#
    ## -------------------------------#
    #library(caret)#
#
    getVarImp=function(pv,pvThres=0.05,prop=NULL) {#
        mean(pv<pvThres,na.rm=T)#
    }#
#
    #pvThres=0.05#
    pvThres=as.numeric(sub("_filtPV","",filtFlag))#
    nFold=10#
#
    if (saveScratchData) {#
        for (predMethod in predMethodVec) {#
            #if (dataVersion%in%c("_20200508","")) dirResult=paste(dirWork,"royR/20201110/results/",sep="")#
            dirResult=paste0(dirWork,"royR/",iteration,"/results/")#
#
            if (length(grep("ScaleItems",variables))==1) {#
                dirData=dirDataScaleItem#
                OrganizedFeature=read.table(paste(dirVarScaleItem,"scs_sset",addVariables,"_variable_desciption_Final.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
            } else {#
                dirData=dirDataTotal#
                OrganizedFeature=read.csv(paste(dirVarTotal,"scs_sset_variable_desciption_Final_RRedit.csv",sep=""),stringsAsFactors=F)#
            }#
            if (respVarName=="lfaat2") {#
                OrganizedFeature$Continuous=sub("leep","leea",OrganizedFeature$Continuous)#
            }#
            if (length(grep("none_",predMethod))!=1) {#
                clin=read.table(paste(dirData,"scs_sset_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                x=strsplit(predMethod,"_")[[1]]#
                #if (any(c("svmPoly")%in%x) | any(c("lasso","enet")%in%x & !"geno"%in%x & !any(c("mtEpic","mtEpicOnly")%in%x))) {#
                if (any(c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")%in%x)) {#
                    clin=read.table(paste(dirData,"scs_sset_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    #OrganizedFeature2=read.table(paste(dirData,"varInfo_",respVarName,addVariables,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    OrganizedFeature2=read.table(paste(dirData,"varInfo_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                }#
                #varInfo=read.table(paste(dirData,"varInfo",addVariables,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                varSub=strsplit(variables,"_")[[1]]; if (variables!="") varSub=varSub[varSub!=""]#
                if ("assess"%in%varSub) {#
                    for (k in which(names(clin)%in%c("Eosino1","Mono1","Lympho1","Neutro1","wtkg","WBC1","yearsfromdxtostart"))) {#
                        x=clin[,k]#
                        if (any(x<0,na.rm=T)) x=x+min(x,na.rm=T)#
                        if (any(x==0,na.rm=T)) {x1=0.5*min(x[which(x!=0)]); x=x+x1}#
                        x=log2(x)#
                        clin[,k]=x#
                    }#
                }#
#
                if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
                    load(paste0(dirData,"datGeno",dataset,".RData",sep=""))#
                    ann2=read.table(paste0(dirData,"HumanExome-12v1-1_A_Gene_Annotation.txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                    names(ann2)[match(c("Name","Chr","MapInfo","Alleles","Transcript.s.","Gene.s.","in.EXON","Mutation.s."),names(ann2))]=c("id","chr","pos","alleles","transcript","geneSym","inExom","mutation")#
                    i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(ann2$chr,ann2$pos))#
                    ann2=ann2[i,]#
                    if (variables%in%c("_geno_inflammation")) {#
                        tbl1=read.table(paste0(dirData,"candGene.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        i=which(toupper(ann2$geneSym)%in%toupper(tbl1$geneSym))#
                        rm(tbl1)#
                    } else if (variables%in%c("_geno_Wright2017Cytokine")) {#
                        tbl1=read.table(paste0(dirData,"Wright2017Cytokine_assays.txt.assaysForGenes.coords_fromLiftOver_hg19.txt",sep=""), sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T)#
                        tbl1=as.data.frame(t(sapply(tbl1[,1],function(x) {as.integer(strsplit(strsplit(sub("chr","",x),"-")[[1]][1],":")[[1]])},USE.NAMES=F)))#
                        colnames(tbl1)=c("chr","pos")#
                        i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$chr,tbl1$pos))#
                        i=which(!is.na(i))#
                        rm(tbl1)#
                    } else if (variables%in%c("_geno_oxytocin","_geno_relaxin")) {#
                        offset=22#
                        fName=dir(dirData,pattern=paste0(sub("_geno","",variables),"_kegg"))#
                        nm=read.table(paste0(dirData,fName,sep=""), sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T,nrow=1)#
                        tbl1=read.table(paste0(dirData,fName,sep=""),sep="\t", h=F, quote="", comment.char="",as.is=T,fill=T,skip=1)#
                        nm=nm[1,1]#
                        x=substr(tbl1[,1],offset,nchar(tbl1[,1]))#
                        geneSym=c()#
                        for (i in 1:length(x)) {#
                            y=strsplit(x[i],";")[[1]][1]#
                            geneSym=c(geneSym,strsplit(y,", ")[[1]])#
                        }#
                        #print(table(toupper(ann2$geneSym)%in%toupper(geneSym)))#
                        i=which(toupper(ann2$geneSym)%in%toupper(geneSym))#
                        rm(offset,fName,tbl1,geneSym)#
                    } else if (variables%in%c("_geno_eQTLGen","_geno_eQTLGen_cis","_geno_eQTLGen_trans")) {#
                        if (variables%in%c("_geno_eQTLGen_cis")) {#
                            tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                            i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                            i=which(!is.na(i))#
                            rm(tbl1)#
                        } else if (variables%in%c("_geno_eQTLGen_trans")) {#
                            tbl1=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                            i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                            i=which(!is.na(i))#
                            rm(tbl1)#
                        } else {#
                            if (F) {#
                                tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                                tbl2=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                                i1=which(!is.na(i))#
                                i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl2$SNPChr,tbl2$SNPPos))#
                                i2=which(!is.na(i))#
                                i=match(paste(datObj$ann$chr,datObj$ann$pos),c(paste(tbl1$SNPChr,tbl1$SNPPos),paste(tbl2$SNPChr,tbl2$SNPPos)))#
                                i12=which(!is.na(i))#
#
                                cat("\nNo. of loci: total ",nrow(datObj$ann)/2,", cis ",length(i1)/2," (",round(100*length(i1)/nrow(datObj$ann)),"%), trans ",length(i2)/2," (",round(100*length(i2)/nrow(datObj$ann)),"%), cis/trans ",length(i12)/2," (",round(100*length(i1)/nrow(datObj$ann)),"%)\n",sep="")#
                                '#
                                No. of loci: total 21525, cis 14542 (68%), trans 770 (4%), cis/trans 14652 (68%)#
                                '#
                            }#
                            tbl1=read.table(paste0(dirData,"cis-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                            tbl2=read.table(paste0(dirData,"trans-eQTL_significant_20181017.txt"), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                            tbl1=tbl1[,c("SNPChr","SNPPos")]#
                            tbl2=tbl2[,c("SNPChr","SNPPos")]#
                            tbl1=rbind(tbl1,tbl2)#
                            i=match(paste(datObj$ann$chr,datObj$ann$pos),paste(tbl1$SNPChr,tbl1$SNPPos))#
                            i=which(!is.na(i))#
                            rm(tbl2,tbl1)#
                        }#
                    } else {#
                        i=1:ncol(datObj$geno)#
                    }#
                    clin=cbind(datObj$phen[,respVarName],as.data.frame(datObj$geno[,i],stringsAsFactors=F),stringsAsFactors=F)#
                    nm=c(respVarName,colnames(datObj$geno)[i])#
                    names(clin)=nm#
                    rm(datObj,ann2)#
                }#
                if ("geno"%in%varSub) {#
                    if (length(grep("_geno_addModel",variables))==1) {#
                        if (predMethod%in%c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")) {#
                            load(paste0(dirData,"datGeno_addModel_",respVarName,dataset,"_surrogate.RData",sep=""))#
                        } else {#
                            load(paste0(dirData,"datGeno_addModel_",respVarName,dataset,".RData",sep=""))#
                        }#
                    } else {#
                        if (predMethod%in%c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")) {#
                            load(paste0(dirData,"datGeno_",respVarName,dataset,"_surrogate.RData",sep=""))#
                        } else {#
                            load(paste0(dirData,"datGeno_",respVarName,dataset,".RData",sep=""))#
                        }#
                    }#
                    load(paste0(dirData,"ptid_",respVarName,dataset,".RData"))#
                    j=match(ptid,datObj$phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                    datAssay=datObj$geno[j2,]#
                    training=training[j1,]#
                    training=cbind(training,datAssay,stringsAsFactors=F)#
                    rm(datObj); rm(ptid,j,j1,j2)#
                }#
                if (any(c("mtEpic","mtEpicOnly","mtEpicSam")%in%varSub)) {#
                    load(paste0(dirDataMtEpic,"m-values.rda"))#
                    datAssay=M#
                    rm(M)#
#
                    load(paste0(dirDataMtEpic,"phen.MSet.raw.rda"))#
                    phen=phen[match(colnames(datAssay),phen$id),]#
                    load(paste0(dirDataMtEpic,"ann.MSet.raw.rda"))#
                    ann=ann[match(rownames(datAssay),ann$id),]#
                    load(paste0(dirDataMtEpic,"pd.RGset.all.rda"))#
                    load(paste0(dirDataMtEpic,"sampleName_corSpear0.95_sample_quantnorm_betaValue.rda"))#
                    j=match(sampleName,phen$Sample_Name)#
#
                    if (length(grep("_mtEpic_chr1to22",variables))==1) {#
                        i=which(ann$chr%in%1:22)#
                        i=i[order(ann$chr[i],ann$pos[i])]#
                    } else {#
                        i=NULL#
                    }#
                    phen=phen[j,]#
                    if ("mtEpicSam"%in%x) {#
                        rm(datAssay)#
                        j=match(clin$ptid,phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                        rm(phen)#
                        clin=clin[j1,]#
                    } else {#
                        datAssay=datAssay[i,j]#
#
                        j=match(clin$ptid,phen$ptid); j1=which(!is.na(j)); j2=j[j1]#
                        rm(phen)#
                        datAssay=datAssay[,j2]#
                        clin=clin[j1,]#
                        datAssay=t(datAssay)#
#
                        nm=NULL#
                        if (mtEpicFlag=="coMethDMR") {#
                        } else if (mtEpicFlag=="pca") {#
                            if (T) {#
                                x1=matrix(nrow=nrow(clin),ncol=nPC); nm=c(names(clin),paste0("mtEpic_pc",1:nPC))#
                                if (F) {#
                                    if (exists("res")) res1=res#
                                    load(paste0(dirResult,"res_",respVarName,sub("_mtEpicOnly","_mtEpic",variables),"_mValue.RData"))#
                                    x1=res[match(rownames(datAssay),rownames(res)),paste0("PC",1:nPC)]#
                                    if (exists("res1")) {res=res1; rm(res1)}#
                                } else {#
                                    if (respVarName%in%c("lfaat2","lfapt2")) {#
                                        load(paste0(dirDataMtEpic,"pcMat_",respVarName,"_none_pca_mtEpic_chr1to22_pcaN5_20220320_seed1.RData"))#
                                        x1=pcMat[match(paste0("X",clin$ptid),rownames(pcMat)),paste0("mtEpic_pc",1:nPC)]#
                                        rm(pcMat)#
                                    }#
                                }#
                                clin=cbind(clin,x1,stringsAsFactors=F)#
                                names(clin)=nm#
                                rm(x1)#
                            }#
                        } else {#
                            training=cbind(training,datAssay,stringsAsFactors=F)#
                        }#
                        rm(nm,datAssay)                    }#
                }#
            }#
#
            predMethodThis=predMethod#
            param=bestTune=NULL#
            x=strsplit(predMethod,"_")[[1]]#
            if (any(c("svmPoly")%in%x)) {#
                param=data.frame(degree=1:3,scale=1,C=1)#
                k=grep("degree",x)#
                if (length(k)==1) {#
                    if (length(x)==k) {#
                        predMethodThis=paste(x[-k],collapse="_")#
                    } else {#
                        predMethodThis=paste(c(x[1:(k-1)],x[(k+1):length(x)]),collapse="_")#
                    }#
                    x1=strsplit(x[k],"scale")[[1]]; x1=as.numeric(c(sub("degree","",x1[1]),strsplit(x1[2],"C")[[1]]))#
                    bestTune=param[which(param$degree==x1[1] & param$scale==x1[2] & param$C==x1[3]),]#
                }#
            } else if (any(c("lasso","enet")%in%x)) {#
                if ("lasso"%in%x) {#
                    if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
                        param=data.frame(alpha=rep(1,3),lambda=c(0.0204,0.0560,0.1540))#
                    } else {#
                        param=data.frame(alpha=rep(1,3),lambda=c(0.0014,0.0137,0.1372))#
                    }#
                } else {#
                    if (substr(variables,1,nchar("_geno"))=="_geno" & variables%in%c("_geno",candGene)) {#
                        param=data.frame(alpha=rep(c(0.25,0.50,0.75),each=3),lambda=c(0.0204,0.0560,0.1540))#
                    } else {#
                        param=data.frame(alpha=rep(c(0.25,0.50,0.75),each=3),lambda=c(0.0014,0.0137,0.1372))#
                    }#
                }#
                k=grep("alpha",x)#
                if (length(k)==1) {#
                    if (length(x)==k) {#
                        predMethodThis=paste(x[-k],collapse="_")#
                    } else {#
                        predMethodThis=paste(c(x[1:(k-1)],x[(k+1):length(x)]),collapse="_")#
                    }#
                    x1=strsplit(x[k],"lambda")[[1]]; x1=as.numeric(c(sub("alpha","",x1[1]),x1[2]))#
                    bestTune=param[which(param$alpha==x1[1] & param$lambda==x1[2]),]#
                }#
            } else if (any(c("neuralNet","neuralNetNS","neuralNetS")%in%x)) {#
                predMethodThis=NA#
                bestTune=NA#
            } else {#
                if ("rf"%in%x) {#
                    k=grep("mtry",x)#
                    if (dataVersion%in%c("_20220320","_20200508")) {#
                        x1=ncol(training)-1#
                        param=data.frame(mtry=round(c(x1/4,x1/3,x1/2)+.1))#
                        if (length(k)==1) {#
                            if (length(x)==k) {#
                                predMethodThis=paste(x[-k],collapse="_")#
                            } else {#
                                predMethodThis=paste(c(x[1:(k-1)],x[(k+1):length(x)]),collapse="_")#
                            }#
                            x1=as.integer(sub("mtry","",x[k]))#
                            bestTune=data.frame(mtry=round((ncol(training)-1)/x1+.1))#
                        }#
                    } else {#
                        if (length(k)==1) {#
                            if (length(x)==k) {#
                                predMethodThis=paste(x[-k],collapse="_")#
                            } else {#
                                predMethodThis=paste(c(x[1:(k-1)],x[(k+1):length(x)]),collapse="_")#
                            }#
                            #x1=2:4#
                            x1=3:4#
                            param=data.frame(mtry=round((ncol(training)-1)/x1+.1))#
                            x1=as.integer(sub("mtry","",x[k]))#
                            bestTune=data.frame(mtry=round((ncol(training)-1)/x1+.1))#
                        } else {#
                            param=data.frame(mtry=floor(seq(2,ncol(training)-1,length=3)))#
                        }#
                    }#
                }#
            }#
            predMethodThis=sub(paste0(dataset,dataVersion),"",predMethodThis)#
            fName=fNameInSuffix#
            switch(predMethodThis,#
                "none_null"={#
                    methodNameLong="Null model"#
                },#
                "none_lm_lfaat1"={#
                    methodNameLong="Linear Regression (lfaat1 only)"#
                },#
                "none_spline_lfaat1_2knots"={#
                    methodNameLong="Cubic spline 5/95 percentile knots (lfaat1 only)"#
                },#
                "none_spline_lfaat1_3knots"={#
                    methodNameLong="Cubic spline quartile knots (lfaat1 only)"#
                },#
                "none_spline_lfaat1_5knots"={#
                    methodNameLong="Cubic spline 5 knots (lfaat1 only)"#
                },#
                "none_lm"={#
                    methodNameLong="Linear Regression Unfiltered"#
                },#
                "none_lm_filtPV0.05"={#
                    methodNameLong="Linear Regression Filtered"#
                },#
                "none_rpart"={#
                    methodNameLong="Rpart"#
                },#
                "none_rpart1se"={#
                    methodNameLong="Rpart with 1se rule"#
                },#
                "none_rf"={#
                    methodNameLong="Random Forest"#
                },#
                "none_svmPoly"={#
                    methodNameLong="Support Vector Machine"#
                },#
                "none_lasso"={#
                    methodNameLong="Lasso"#
                },#
                "none_enet"={#
                    methodNameLong="Elasticnet"#
                },#
                "none_lm_noLfaat1"={#
                    methodNameLong="Linear Regression Unfiltered (no lfaat1)"#
                },#
                "none_lm_noLfaat1_filtPV0.05"={#
                    methodNameLong="Linear Regression Filtered (no lfaat1)"#
                },#
                "none_rpart_noLfaat1"={#
                    methodNameLong="Rpart (no lfaat1)"#
                },#
                "none_rpart1se_noLfaat1"={#
                    methodNameLong="Rpart with 1se rule (no lfaat1)"#
                },#
                "none_rf_noLfaat1"={#
                    methodNameLong="Random Forest (no lfaat1)"#
                },#
                "none_svmPoly_noLfaat1"={#
                    methodNameLong="Support Vector Machine (no lfaat1)"#
                },#
                "none_lm_univariate_lfaat1ScaleItems"={#
                    methodNameLong="Univariate Linear Regression (lfaat1 scale items)"#
                },#
                "none_lm_univariate_lfaat1ScaleItems_filtPV0.05"={#
                    methodNameLong="Univariate Linear Regression Filtered (lfaat1 scale items)"#
                },#
                "none_lm_lfaat1ScaleItems"={#
                    methodNameLong="Linear Regression Unfiltered (lfaat1 scale items)"#
                },#
                "none_lm_lfaat1ScaleItems_filtPV0.05"={#
                    methodNameLong="Linear Regression Filtered (lfaat1 scale items)"#
                },#
                "none_rpart_lfaat1ScaleItems"={#
                    methodNameLong="Rpart (lfaat1 scale items)"#
                },#
                "none_rpart1se_lfaat1ScaleItems"={#
                    methodNameLong="Rpart with 1se rule (lfaat1 scale items)"#
                },#
                "none_rf_lfaat1ScaleItems"={#
                    methodNameLong="Random Forest (lfaat1 scale items)"#
                },#
                "none_svmPoly_lfaat1ScaleItems"={#
                    methodNameLong="Support Vector Machine (lfaat1 scale items)"#
                },#
                "none_null_withLfaat1ScaleItems"={#
                    if (dataVersion=="") dirResult=paste(dirWork,"royR/20200425/results/",sep="")#
                    methodNameLong="Null model"#
                },#
                "none_lm_withLfaat1ScaleItems"={#
                    methodNameLong="Linear Regression Unfiltered (with lfaat1 scale items)"#
                },#
                "none_lm_withLfaat1ScaleItems_filtPV0.05"={#
                    methodNameLong="Linear Regression Filtered (with lfaat1 scale items)"#
                },#
                "none_rpart_withLfaat1ScaleItems"={#
                    methodNameLong="Rpart (with lfaat1 scale items)"#
                },#
                "none_rpart1se_withLfaat1ScaleItems"={#
                    methodNameLong="Rpart with 1se rule (with lfaat1 scale items)"#
                },#
                "none_rf_withLfaat1ScaleItems"={#
                    methodNameLong="Random Forest (with lfaat1 scale items)"#
                },#
                "none_svmPoly_withLfaat1ScaleItems"={#
                    methodNameLong="Support Vector Machine (with lfaat1 scale items)"#
                },#
                "none_lasso_withLfaat1ScaleItems"={#
                    methodNameLong="Lasso (with lfaat1 scale items)"#
                },#
                "none_enet_withLfaat1ScaleItems"={#
                    methodNameLong="Elasticnet (with lfaat1 scale items)"#
                },#
                "none_null_geno"={#
                    if (dataVersion=="") dirResult=paste(dirWork,"royR/20200425/results/",sep="")#
                    methodNameLong="Null model"#
                },#
                "none_lm_geno_filtPV0.05"={#
                    methodNameLong="Linear Regression Filtered (genotyped data)"#
                },#
                "none_rpart1se_geno"={#
                    methodNameLong="Rpart with 1se rule (genotyped data)"#
                },#
                "none_rf_geno"={#
                    methodNameLong="Random Forest (genotyped data)"#
                },#
                "none_svmPoly_geno"={#
                    methodNameLong="Support Vector Machine (genotyped data)"#
                },#
                "none_lasso_geno"={#
                    methodNameLong="Lasso (genotyped data)"#
                },#
                "none_enet_geno"={#
                    methodNameLong="Elasticnet (genotyped data)"#
                },#
                "caret_lm"={#
                    methodNameLong="Caret Linear Regression"#
                    fName="_2"#
                },#
                "caret_rpart"={#
                    methodNameLong="Caret rpart"#
                    fName="_2"#
                },#
                "caret_rpart1se"={#
                    methodNameLong="Caret rpart with 1se rule"#
                    fName="_2"#
                },#
                "caret_rf"={#
                    methodNameLong="Caret Random Forest"#
                    fName="_1"#
                },#
                "caret_svmPoly"={#
                    methodNameLong="Caret Support Vector Machine"#
                    fName="_1"#
                }#
            )#
            x=strsplit(predMethod,"_")[[1]]#
            if ("lm"%in%x) {#
                methodNameLong="Linear Regression Unfiltered"#
                if ("univariate"%in%x) {#
                    methodNameLong="Univariate Linear Regression"#
                }#
                if (length(grep(filtFlag,predMethod,fixed=T))==1) {#
                    methodNameLong="Linear Regression Filtered"#
                    methodNameLong=paste0(methodNameLong,"Linear Regression Filtered PV ",sub("_filtPV","",filtFlag))#
                }#
            } else if ("rpart1se"%in%x) {#
                methodNameLong="Rpart with 1se rule"#
            } else if ("rf"%in%x) {#
                methodNameLong="Random Forest"#
            } else if ("svmPoly"%in%x) {#
                methodNameLong="Support Vector Machine"#
            } else if ("lasso"%in%x) {#
                methodNameLong="Lasso"#
            } else if ("enet"%in%x) {#
                methodNameLong="Elasticnet"#
            } else if ("neuralNet"%in%x) {#
                methodNameLong="Neural Network"#
            } else if ("neuralNetNS"%in%x) {#
                methodNameLong="Neural Network (unscaled variables)"#
            } else if ("neuralNetS"%in%x) {#
                methodNameLong="Neural Network (scaled variables)"#
            } else if ("null"%in%x) {#
                methodNameLong="Null model"#
            }#
            if (paste0("_with",capWords(scaleVarName),"ScaleItems")%in%x) {#
                methodNameLong=paste0(methodNameLong," (with ",scaleVarName," scale items)")#
            } else if ("geno"%in%x) {#
                if ("inflammation"%in%x) {#
                    methodNameLong=paste0(methodNameLong," (genotyped data, inflammation genes)")#
                } else if ("Wright2017Cytokine"%in%x) {#
                    methodNameLong=paste0(methodNameLong," (genotyped data, Wright 2017 cytokine genes)")#
                } else {#
                    methodNameLong=paste0(methodNameLong," (genotyped data)")#
                }#
            }#
            if (any(c("mtEpic","mtEpicOnly")%in%x)) {#
                if (mtEpicFlag=="coMethDMR") {#
                    methodNameLong=paste0(methodNameLong," (clinical + mtEpic coMethDMRs)")#
                } else if (mtEpicFlag=="pca") {#
                    methodNameLong=paste0(methodNameLong," (clinical + mtEpic PCs)")#
                } else {#
                    methodNameLong=paste0(methodNameLong," (clinical + mtEpic loci)")#
                }#
            }#
            if (dataVersion=="") {#
                x=strsplit(predMethod,"_")[[1]]#
                if (any(c("svmPoly")%in%x)) {#
                    fName="_scale1_seed1_1000"#
                }#
            }#
            if (paste0(scaleVarName,"Spline")%in%x) {#
                fName="_seed1"#
                numKnots=as.integer(sub("knots","",x[length(x)]))#
                if (length(grep(filtFlag,predMethod,fixed=T))==1) {#
                    methodNameLong="Linear Regression Filtered"#
                    if (numKnots==5) fName="_seed1_1000"#
                } else {#
                    methodNameLong="Linear Regression Unfiltered"#
                }#
                if (numKnots==2) {#
                    methodNameLong=paste(methodNameLong,", ",scaleVarName," cubic spline 5/95 percentile knots",sep="")#
                } else if (numKnots==3) {#
                    methodNameLong=paste(methodNameLong,", ",scaleVarName," cubic spline quartile knots",sep="")#
                } else {#
                    methodNameLong=paste(methodNameLong,", ",scaleVarName," cubic spline 5 knots",sep="")#
                }#
            }#
            if (length(grep(filtFlag,predMethod,fixed=T))==1) {#
                #fName=paste(dataset,dataVersion,filtFlag,fName,sep="")#
                fName=paste(dataset,dataVersion,fName,sep="")#
            } else {#
                fName=paste(dataset,dataVersion,fName,sep="")#
            }#
            methodNameShort=""#
            if (length(grep("_null",predMethod))==1) {#
                methodNameShort="Null"#
            } else if (length(grep("_lm",predMethod))==1) {#
                if (length(grep("_filt",predMethod))==1) {#
                    methodNameShort="Linear regression (filtered)"#
                } else if (length(grep("_univariate",predMethod))==1) {#
                        methodNameShort="Linear regression (univariate)"#
                } else {#
                    methodNameShort="Linear regression (unfiltered)"#
                }#
            } else if (length(grep("_rpart",predMethod))==1) {#
                methodNameShort="RPART"#
            } else if (length(grep("_rf",predMethod))==1) {#
                methodNameShort="Random forest"#
            } else if (length(grep("_svmPoly",predMethod))==1) {#
                methodNameShort="SVM"#
            } else if (length(grep("_lasso",predMethod))==1) {#
                methodNameShort="Lasso"#
            } else if (length(grep("_enet",predMethod))==1) {#
                methodNameShort="Elasticnet"#
            } else if (length(grep("_neuralNet",predMethod))==1) {#
                methodNameShort="Neural network"#
            }#
#
            predMethodThis=predMethod#
            x=strsplit(predMethod,"_")[[1]]#
            if (dataVersion%in%c("_20220320","_20200508")) {#
                k=grep("mtry|degree|alpha",x)#
                if (length(k)==1) {#
                    predMethodThis=paste(x[-k],collapse="_")#
                }#
            } else {#
                k=grep("mtry",x)#
                if (length(k)==1) {#
                    if (length(x)==k) {#
                        predMethodThis=paste(c(x[-k],"mtry43"),collapse="_")#
                    } else {#
                        predMethodThis=paste(c(x[1:(k-1)],"mtry43",x[(k+1):length(x)]),collapse="_")#
                    }#
                } else {#
                    k=grep("degree",x)#
                    if (length(k)==1) {#
                        k=grep("scale1",x)#
                        if (length(k)==1) {#
                            if (length(x)==k) {#
                                predMethodThis=paste(c(x[-k],"scale1"),collapse="_")#
                            } else {#
                                predMethodThis=paste(c(x[1:(k-1)],"scale1",x[(k+1):length(x)]),collapse="_")#
                            }#
                        } else {#
                            k=grep("degree",x)#
                            if (length(x)==k) {#
                                predMethodThis=paste(x[-k],collapse="_")#
                            } else {#
                                predMethodThis=paste(c(x[1:(k-1)],x[(k+1):length(x)]),collapse="_")#
                            }#
                        }#
                    } else {#
                        k=grep("alpha",x)#
                        if (length(k)==1) {#
                            if (length(x)==k) {#
                                predMethodThis=paste(c(x[-k],"alpha"),collapse="_")#
                            } else {#
                                predMethodThis=paste(c(x[1:(k-1)],"alpha",x[(k+1):length(x)]),collapse="_")#
                            }#
                        }#
                    }#
                }#
            }#
            #x=strsplit(predMethod,"_")[[1]]#
            #predMethodThis=predMethod#
            #predMethodThis=sub(filtFlag,"",sub(paste0(dataset,dataVersion),"",predMethodThis))#
            if (length(grep("_filt",predMethod))==1) {#
                predMethodThis=sub(paste0(variables,dataset,dataVersion,filtFlag),paste0(filtFlag,variables),predMethodThis)#
            } else {#
                predMethodThis=sub(paste0(dataset,dataVersion),"",predMethodThis)#
            }#
            #if ("null"%in%x) predMethodThis=sub(variables,"",predMethodThis)#
            load(paste0(dirResult,"fit_",respVarName,respType,"_",predMethodThis,fName,".RData"))#
            cat("\n\n============== ",predMethod,"\n",sep="")#
            if (length(grep("none_",predMethod))==1) {#
                #x=strsplit(predMethod,"_")[[1]]#
                if (any(c("rf")%in%x)) {#
                    param=data.frame(mtry=unique(perfMat[,"mtry"]))#
                } else if (any(c("neuralNet","neuralNetNS","neuralNetS")%in%x)) {#
                    param=data.frame(batchSize=unique(perfMat[,"batchSize"]))#
                } else if (any(c("lasso","enet")%in%x)) {#
                    x2=paste(perfMat[,"alpha"], perfMat[,"lambda"])#
                    param=as.data.frame(perfMat[which(!duplicated(x2)),c("alpha","lambda")])#
                }#
                if (scaleVarName%in%x) {#
                    bestTune=data.frame(intercept=TRUE)#
                    varImpAllMat=varImpFstatMat#
                    fit=list(varImpMat=varImpMat,perfMat=perfMat,pred=pred)#
                    if ("acc"%in%colnames(fit$perfMat)) {#
                        res=list(methodNameShort=methodNameShort,methodNameLong=methodNameLong,bestTune=bestTune,rmse=fit$perfMat[,"rmse"],acc=fit$perfMat[,"acc"],varImp=varImpMat)#
                    } else {#
                        res=list(methodNameShort=methodNameShort,methodNameLong=methodNameLong,bestTune=bestTune,rmse=fit$perfMat[,"rmse"],varImp=varImpMat)#
                    }#
                } else {#
                    if (any(c("rf","svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")%in%x)) {#
                        if (length(grep("mtry|degree|alpha|batchSize",x))!=1) load(paste(dirResult,"bestTune_",respVarName,respType,"_",predMethodThis,fName,".RData",sep=""))#
#
                        dat=perfMat#
                        i=1:nrow(dat)#
                        for (k in 1:ncol(bestTune)) {#
                            if (names(bestTune)[k]%in%colnames(dat)) {#
                                i=i[which(dat[i,names(bestTune)[k]]==bestTune[1,k])]#
                            }#
                        }#
                        perfMat=dat[i,]#
#
                        varImpAllMat=varImpCaretMat#
                        pId=sapply(colnames(varImpAllMat),getParamId,USE.NAMES=F)#
                        varImpAllMat=varImpAllMat[,which(pId==which(apply(param,1,paste,collapse="_")==paste(bestTune,collapse="_")))]#
                        predAll=pred#
                        i=1:nrow(predAll)#
                        for (k in 1:ncol(bestTune)) {#
                            i=i[which(predAll[i,names(bestTune)[k]]==bestTune[1,k])]#
                        }#
                        pred=predAll[i,]#
                    } else if ("lm"%in%x) {#
                        bestTune=data.frame(intercept=TRUE)#
                        varImpAllMat=varImpFstatMat#
                    } else {#
                        bestTune=data.frame(parameter="none")#
                        varImpAllMat=varImpCaretMat#
                    }#
                    x1=rownames(varImpAllMat)#
                    #if (any(c("svmPoly")%in%x) | any(c("lasso","enet")%in%x & !"geno"%in%x & !any(c("mtEpic","mtEpicOnly")%in%x))) {#
                    if (any(c("svmPoly","lasso","enet","neuralNet","neuralNetNS","neuralNetS")%in%x)) {#
                        #OrganizedFeature2=read.table(paste(dirData,"varInfo_",respVarName,addVariables,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        OrganizedFeature2=read.table(paste(dirData,"varInfo_",respVarName,addVariables,dataset,"_filtered_manuallyCurated_imputed_surrogate",dataVersion,".txt",sep=""), sep="\t", h=T, quote="", comment.char="",as.is=T,fill=T)#
                        k=match(OrganizedFeature2$surrogate,x1); k1=which(!is.na(k)); k2=k[k1]#
                        x1[k2]=OrganizedFeature2$variable[k1]#
                    }#
                    varImpMat=data.frame(variable=x1,surrogate=rownames(varImpAllMat),impOverall=rep(NA,nrow(varImpAllMat)),stringsAsFactors=F)#
                    repId=sapply(colnames(varImpAllMat),getRepId,USE.NAMES=F)#
                    for (k in 1:nrow(varImpMat)) {#
                        varImpMat$impOverall[k]=mean(meanByBatch(x=varImpAllMat[k,],id=repId)$value,na.rm=T)#
                    }#
                    varImpMat$stat=varImpMat$impOverall#
                    x=max(abs(varImpMat$impOverall-min(varImpMat$impOverall,na.rm=T)),na.rm=T)#
                    varImpMat$impOverall=100*(varImpMat$impOverall-min(varImpMat$impOverall,na.rm=T))/x#
                    fit=list(varImpMat=varImpMat,perfMat=perfMat,pred=pred)#
                    if ("acc"%in%colnames(fit$perfMat)) {#
                        res=list(methodNameShort=methodNameShort,methodNameLong=methodNameLong,bestTune=bestTune,rmse=fit$perfMat[,"rmse"],acc=fit$perfMat[,"acc"],varImp=varImpMat)#
                    } else {#
                        res=list(methodNameShort=methodNameShort,methodNameLong=methodNameLong,bestTune=bestTune,rmse=fit$perfMat[,"rmse"],varImp=varImpMat)#
                    }#
                }#
                foldRepId=rownames(fit$perfMat)#
#
                rm(varImpMat,perfMat)#
            } else {#
                foldRepId=fit$resample$Resample#
                #fit$finalModel$variable.importance#
                res=list(methodNameShort=methodNameShort,methodNameLong=methodNameLong,bestTune=fit$bestTune,rmse=fit$resample$RMSE,varImp=data.frame(variable=rownames(varImp(fit)$importance),surrogate=rownames(varImp(fit)$importance),impOverall=varImp(fit)$importance$Overall,stringsAsFactors=F))#
                rownames(res)=NULL#
                k=which(!res$varImp$variable%in%names(clin))#
                res$varImp$variable[k]=substr(res$varImp$variable[k],1,nchar(res$varImp$variable[k])-1)#
                res$varImp=res$varImp[order(-res$varImp$impOverall),]#
                res$varImp=res$varImp[!duplicated(res$varImp$variable),]#
            }#
            x=meanByBatch(x=res$rmse,id=sapply(foldRepId,getRepId,USE.NAMES=F))#
            names(x)=c("rep","rmse")#
            res$repLevelInfo=x#
            if ("acc"%in%names(res)) {#
                x=meanByBatch(x=res$acc,id=sapply(foldRepId,getRepId,USE.NAMES=F)); names(x)=c("rep","acc")#
                res$repLevelInfo$acc=x$acc#
            }#
#
            cat("No. of reps: ",nrow(res$repLevelInfo),"\n",sep="")#
            cat("Best tuning parameters:\n",sep="")#
            print(res$bestTune)#
            dat=fit$pred#
            i=1:nrow(dat)#
            for (k in 1:ncol(res$bestTune)) {#
                if (names(res$bestTune)[k]%in%names(dat)) {#
                    i=i[which(dat[i,names(res$bestTune)[k]]==res$bestTune[1,k])]#
                }#
            }#
            dat=dat[i,]#
            dat$repId=sapply(dat$Resample,getRepId,USE.NAMES=F)#
            dat=dat[order(dat$repId,dat$rowIndex),]#
            pred=matrix(nrow=nrow(training),ncol=sum(!duplicated(dat$repId)))#
            rownames(pred)=rownames(training)#
            n=nrow(pred)#
            for (k in 1:ncol(pred)) {#
                pred[,k]=dat$pred[(k-1)*n+(1:n)]#
            }#
#
            save(res,file=paste(dirScratch,"res_",respVarName,respType,"_",predMethod,".RData",sep=""))#
            save(pred,file=paste(dirScratch,"pred_",respVarName,respType,"_",predMethod,".RData",sep=""))#
        }#
#
        rm(fit,res,pred,dat)#
        save.image("tmp.RData")#
    } ## END saveScratchData#
#
    ## -------------------------------#
    ## -------------------------------#
    parThis=list(cex=0.5,pch=19,cex.main=3,cex.lab=3,cex.axis=2.5)#
    figNoThis=0#
    figNoThis=ifelse(variables=="",0,5)#
    library(ggplot2)#
    library(gridExtra)#
#
    if (variables=="_combined" & respType=="") {#
#
        ## --------------#
        ## RMSE - combined#
        figNoThis=figNoThis+1#
        fName=paste0("predictionPerformance_",respVarName,respType,"_rmse",variables,fileNameSuffix)#
        if (figNoFlag) fName=paste0("fig",figNoThis,"_",fName)#
        if (!onePlotFlag) {#
            switch(outputFormat,#
                "pdf"={fName=paste0(fName,".pdf")},#
                "png"={fName=paste0(fName,"_%1d.png")}#
            )#
        }#
        lim=NULL#
        lim=c()#
        varList=c("",paste0("_with",capWords(scaleVarName),"ScaleItems"))#
        varList=c("_assess","_assess_leep5t1_leep12t1"); if (respVarName%in%c("lfaat2","lfaat6")) varList=gsub("leep","leea",varList)#
        for (predMethod in predMethodVec) {#
            for (varThis in varList) {#
                #for (varThis in c(paste0("_with",capWords(scaleVarName),"ScaleItems"))) {#
                fName1=sub(variables,varThis,predMethod)#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                lim=c(lim,res$repLevelInfo$rmse)#
            }#
        }#
        lim=c(range(lim,na.rm=T))#
        lim#
        lim=c(0,2)#
        lim=c(1,2.5)#
        lim=c(1.4,2.3)#
        lim=c(1.6,2.4)#
#
        nBr=100#
        nBr=1000#
#
        plot_list <- vector("list",length(predMethodVec))#
        tmp=rep(NA,2*(length(predMethodVec)+1))#
        tmpC=vector(mode="character",length=2*(length(predMethodVec)+1))#
        tbl=data.frame(method=tmpC,noOfRep=tmp,mean=tmp,sd=tmp,mean_rmse=tmp,perc2.5_rmse=tmp,perc97.5_rmse=tmp,stringsAsFactors=F)#
        names(tbl)=c("method","noOfRep",paste(c("mean","sd"),"_",respVarName,respType,sep=""),"mean_rmse","perc2.5_rmse","perc97.5_rmse")#
        pId2=1#
        tbl$method[pId2]="observed"#
        tbl[pId2,paste("mean_",respVarName,respType,sep="")]=mean(training[,respVarName],na.rm=T)#
        tbl[pId2,paste("sd_",respVarName,respType,sep="")]=sd(training[,respVarName],na.rm=T)#
        for (pId in 1:length(predMethodVec)) {#
            #x3=NA#
            #for (varThis in c("",paste0("_with",capWords(scaleVarName),"ScaleItems"))) {#
            varList=c(paste0("_with",capWords(scaleVarName),"ScaleItems"),paste0("_with",capWords(scaleVarName),"ScaleItems"))#
            varList=c("",paste0("_with",capWords(scaleVarName),"ScaleItems"))#
            varList=c("_assess","_assess_leep5t1_leep12t1"); if (respVarName%in%c("lfaat2","lfaat6")) varList=gsub("leep","leea",varList)#
            for (vId in 1:length(varList)) {#
                varThis=varList[vId]#
                predMethod=sub(variables,varThis,predMethodVec[pId])#
                fName1=predMethod#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                load(paste(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData",sep=""))#
                dat=apply(pred,1,mean,na.rm=T)#
                tbl$method[pId2]=predMethod#
                tbl[pId2,paste("mean_",respVarName,respType,sep="")]=mean(dat,na.rm=T)#
                tbl[pId2,paste("sd_",respVarName,respType,sep="")]=sd(dat,na.rm=T)#
                tbl$noOfRep[pId2]=nrow(res$repLevelInfo)#
                tbl$mean_rmse[pId2]=mean(res$repLevelInfo$rmse)#
                tbl$perc2.5_rmse[pId2]=quantile(res$repLevelInfo$rmse,probs=0.025,na.rm=T)#
                tbl$perc97.5_rmse[pId2]=quantile(res$repLevelInfo$rmse,probs=0.975,na.rm=T)#
                xlab="RMSE"#
                xlab=ifelse(pId==length(predMethodVec),"RMSE","")#
                xlab=ifelse(pId%%(length(predMethodVec)/2)==0,"RMSE","")#
                if (dispNoOfRepFlag) {#
                    header=paste(variablesNameShort,": ",res$methodNameShort,", no. of reps ",nrow(res$repLevelInfo),sep="")#
                } else {#
                    #header=paste(variablesNameShort,": ",res$methodNameShort,sep="")#
                    header=capWords(paste(res$methodNameShort,sep=""))#
                }#
                if ((length(grep("_rf",predMethod))==1 & length(grep("_rf",predMethodVec))>1) | (length(grep("_svmPoly",predMethod))==1 & length(grep("_svmPoly",predMethodVec))>1) | (length(grep("_lasso",predMethod))==1 & length(grep("_lasso",predMethodVec))>1) | (length(grep("_enet",predMethod))==1 & length(grep("_enet",predMethodVec))>1)) {#
                    if (length(grep("_rf",predMethod))==1) {x=paste("=p/",round((ncol(training)-1)/res$bestTune),sep="")} else {x=res$bestTune}#
                    header=paste(header," ",paste(paste(names(res$bestTune),x,sep=""),collapse=","),sep="")#
                }#
                colVec=c("darkred","steelblue")#
                #ylab=paste0("With ",sub("2","1",respVarNameShort)," ",ifelse(varThis=="","TS","SI"))#
                ylab="Density"#
                #if (varThis=="") {#
                if (vId==1) {#
                    x1=res$repLevelInfo$rmse#
                    x3=tbl$mean_rmse[pId2]#
                } else {#
                    x2=res$repLevelInfo$rmse#
                    x3=c(x3,tbl$mean_rmse[pId2])#
                }#
                pId2=pId2+1#
            }#
            #x1=rep(NA,length(x2))#
            df =data.frame(x1=x1,x2=x2)#
            df1=data.frame(x=rep(x3[1],2),y=c(0,1))#
            df2=data.frame(x=rep(x3[2],2),y=c(0,-1))#
            df3=data.frame(x=c(1.9,1.95),y=rep(0.7,2))#
            #cat("\n\n---------- ",predMethodVec[pId],"\n")#
            #cat("diff(range(df$x1))/30 ",diff(range(df$x1))/30,"\n")#
            #binwidth=diff(range(df$x1))/30#
            #binwidth=0.001#
            #binwidth=0.002#
            #binwidth=0.008#
            binwidth=0.004#
#
            plot_list[[pId]] = ggplot(df, aes(x)) +#
            geom_histogram( aes(x = x1, y = after_stat(count/max(count))),binwidth = binwidth, fill=colVec[1]) +#
            geom_histogram( aes(x = x2, y = -after_stat(count/max(count))), binwidth = binwidth, fill=colVec[2]) +#
            geom_line(aes(x=x,y=y),data=df1,linetype="dashed") +#
            geom_line(aes(x=x,y=y),data=df2,linetype="dashed") +#
            geom_hline(yintercept=0, linetype="solid", color = "darkgrey") +#
            xlim(1.5,2.4)+ylim(-1,1)+labs(title=header,x=xlab,y=ylab)#
#
            if (pId==1) {#
                if (predVarName=="Assessable") {#
                    nm=paste0("With ",c("assessable","assessable\n+ wornout + exhaustion"))#
                } else {#
                    nm=paste0("With ",sub("2","1",strsplit(respVarNameShort," ")[[1]][1]),c(" TS"," SI"))#
                }#
                #geom_line(aes(x=x,y=y),data=df3,linetype="dashed") +#
                plot_list[[pId]] = plot_list[[pId]] +#
                geom_line(aes(x=x,y=y),data=df3,linetype="blank") +#
                geom_text(x=1.9, y=0.7,label="Mean RMSE",col="black") +#
                geom_text(x=1.9, y=0.2,label=nm[1],col=colVec[1]) +#
                geom_text(x=1.9, y=-0.2,label=nm[2],col=colVec[2])#
            }#
        }#
        if (!onePlotFlag) {#
            glist <- lapply(plot_list, ggplotGrob)#
            #ggsave(paste(fName,"_%1d.png",sep=""), marrangeGrob(glist,nrow=length(glist)/2,ncol=1,top=NULL))#
            ggsave(fName, marrangeGrob(glist,nrow=length(glist),ncol=1,top=NULL),width=7,height=2*7)#
            dev.off()#
        }#
        ## --------------#
        ## Predicted vs. observed density plots#
#
        figNoThis=figNoThis+1#
#
        dat=as.data.frame(training[,respVarName])#
        #if (respVarName=="lfaat2") colnames(dat)=c("MorningFatigueScore") else colnames(dat)=c("EveningFatigueScore")#
        switch(respVarName,#
            "lfaat2"={colnames(dat)=c("Time2MorningFatigueScore")},#
            "lfaat6"={colnames(dat)=c("Time6MorningFatigueScore")},#
            "lfapt2"={colnames(dat)=c("Time2EveningFatigueScore")},#
            "lfapt6"={colnames(dat)=c("Time6EveningFatigueScore")},#
            "newafitott2"={colnames(dat)=c("Time2CognitiveFatigueScore")},#
            "newafitott6"={colnames(dat)=c("Time6CognitiveFatigueScore")}#
        )#
        dat$source="Observed"#
        dat$order=0#
        head(dat)#
        dim(dat)#
#
        dat1=dat#
        colVec=c("grey","darkred","steelblue")#
        xlab=respVarNameShort; ylab="Density"#
        pId2=1#
        for (pId in 1:length(predMethodVec)) {#
            predMethod=predMethodVec[pId]#
            x=strsplit(predMethod,"_")[[1]]#
            if ("null"%in%x) next#
            dat2=dat1#
            #varList=c(paste0("_with",capWords(scaleVarName),"ScaleItems"))#
            varList=c("",paste0("_with",capWords(scaleVarName),"ScaleItems"))#
            varList=c("_assess","_assess_leep5t1_leep12t1"); if (respVarName%in%c("lfaat2","lfaat6")) varList=gsub("leep","leea",varList)#
            for (varThis in varList) {#
                predMethod=sub(variables,varThis,predMethodVec[pId])#
                fName1=predMethod#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                load(paste(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData",sep=""))#
#
                dat=apply(pred,1,mean,na.rm=T)#
                dat=as.data.frame(dat)#
                #if (respVarName=="lfaat2") colnames(dat)=c("MorningFatigueScore") else colnames(dat)=c("EveningFatigueScore")#
                switch(respVarName,#
                    "lfaat2"={colnames(dat)=c("Time2MorningFatigueScore")},#
                    "lfaat6"={colnames(dat)=c("Time6MorningFatigueScore")},#
                    "lfapt2"={colnames(dat)=c("Time2EveningFatigueScore")},#
                    "lfapt6"={colnames(dat)=c("Time6EveningFatigueScore")},#
                    "newafitott2"={colnames(dat)=c("Time2CognitiveFatigueScore")},#
                    "newafitott6"={colnames(dat)=c("Time6CognitiveFatigueScore")}#
                )#
                dat$source=capWords(paste0(res$methodNameShort))#
                dat$order=as.integer(varThis==paste0("_with",capWords(scaleVarName),"ScaleItems"))+1#
#
                header=dat$source#
                if (predVarName=="Assessable") {#
                    nm=paste0("Predicted (with ",ifelse(varThis=="_assess","assessable","assessable\n+ wornout + exhaustion"),")")#
                } else {#
                    nm=paste0("Predicted (with ",sub("2","1",strsplit(respVarNameShort," ")[[1]][1])," ",ifelse(varThis=="","TS","SI"),")")#
                }#
                dat$source=nm#
                dat2=rbind(dat2,dat)#
            }#
            dat2$source=factor(dat2$source,levels=unique(dat2$source))#
            fName=paste0("predictionPerformance_",respVarName,respType,"_densityPlot_predVsObs",variables,fileNameSuffix,"_",pId2)#
            if (figNoFlag) fName=paste0("fig",figNoThis,"_",fName)#
            if (!onePlotFlag) {#
                switch(outputFormat,#
                    "pdf"={fName=paste0(fName,".pdf")},#
                    "png"={fName=paste0(fName,".png")}#
                )#
            }#
            if (F) {#
                if (respVarName=="lfaat2") {#
                    ggplot(dat2,aes(MorningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)#
                } else {#
                    ggplot(dat2,aes(EveningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)#
                }#
            }#
            switch(respVarName,#
                "lfaat2"={ggplot(dat2,aes(Time2MorningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)},#
                "lfaat6"={ggplot(dat2,aes(Time6MorningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)},#
                "lfapt2"={ggplot(dat2,aes(Time2EveningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)},#
                "lfapt6"={ggplot(dat2,aes(Time6EveningFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)},#
                "newafitott2"={ggplot(dat2,aes(Time2CognitiveFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)},#
                "newafitott6"={ggplot(dat2,aes(Time6CognitiveFatigueScore,fill=source))+geom_density(alpha=0.7)+xlim(0,10)+ylim(0,0.75)+labs(x=xlab,y=ylab,fill=header)+scale_fill_manual(values=colVec)}#
            )#
            if (!onePlotFlag) {#
                ggsave(fName)#
                #unlink(fName)#
            }#
            pId2=pId2+1#
        }#
#
        ## --------------#
        break#
    } else {#
    }#
    ## -------------------------------#
    ## -------------------------------#
#
    nVar=20#
    nVar=5#
    #cat("\n\n============== ",nVar," most important variables:\n",sep="")#
    for (predMethod in predMethodVec) {#
        x=strsplit(predMethod,"_")[[1]]#
        if (!scaleVarName%in%x) {#
            fName1=predMethod#
            #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
            load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
            #cat("\n-------- ",res$methodNameShort,": rep",nrow(res$repLevelInfo),"\n\n",sep="")#
            if (F) {#
                varName=ifelse("impOverall"%in%names(res$varImp),"impOverall","propOverall")#
                cat("\n-------- ",variablesNameShort,": ",res$methodNameShort,"\n\n",sep="")#
                print(res$varImp[order(-res$varImp[,varName]),][1:nVar,])#
            }#
        }#
    }#
    ## -------------------------------#
    ## -------------------------------#
    ## Performance evaluation#
    ## --------------#
    ## RMSE#
#
    if (F) {#
        if (respType=="") {#
            if (!onePlotFlag) pdf(paste("predictionPerformance_rmse_",respVarName,respType,variables,fileNameSuffix,".pdf",sep=""))#
#
            par(mfrow=c(4,1))#
            #par(mar=c(5, 4, 4, 2) + 0.1)#
            par(mar=c(4, 4, 2, .5) + 0.1)#
#
            lim=NULL#
            lim=c()#
            for (predMethod in predMethodVec) {#
                fName1=predMethod#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                lim=c(lim,res$repLevelInfo$rmse)#
                #cat(predMethod," ",length(res$rmse)/10,"\n")#
            }#
            lim=c(range(lim,na.rm=T))#
            lim#
            lim=c(0,2)#
            lim=c(1.5,1.8)#
#
            nBr=1000#
#
            tmp=vector(mode="numeric",length=length(predMethodVec))#
            tmpC=vector(mode="character",length=length(predMethodVec))#
            tbl=data.frame(method=tmpC,noOfRep=tmp,mean_rmse=tmp,perc2.5_rmse=tmp,perc97.5_rmse=tmp,stringsAsFactors=F)#
            for (pId in 1:length(predMethodVec)) {#
                predMethod=predMethodVec[pId]#
                fName1=predMethod#
                #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
                load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
                tbl$method[pId]=predMethod#
                tbl$noOfRep[pId]=nrow(res$repLevelInfo)#
                tbl$mean_rmse[pId]=mean(res$repLevelInfo$rmse)#
                tbl$perc2.5_rmse[pId]=quantile(res$repLevelInfo$rmse,probs=0.025,na.rm=T)#
                tbl$perc97.5_rmse[pId]=quantile(res$repLevelInfo$rmse,probs=0.975,na.rm=T)#
                if (dispNoOfRepFlag) {header=paste(variablesNameShort,": ",res$methodNameShort,", no. of reps ",nrow(res$repLevelInfo),sep="")#
                } else {header=paste(variablesNameShort,": ",res$methodNameShort,sep="")}#
                if (is.null(lim)) {#
                    plot(density(res$repLevelInfo$rmse,na.rm=T),main=header,xlab="RMSE")#
                } else {#
                    plot(density(res$repLevelInfo$rmse,na.rm=T),xlim=lim,main=header,xlab="RMSE")#
                }#
                x=c(tbl$mean_rmse[pId],tbl$perc2.5_rmse[pId],tbl$perc97.5_rmse[pId])#
                names(x)=c("mean","2.5%","97.5%")#
                x=x[1]#
                abline(v=x,lty="dashed",col="red")#
                axis(side=1,at=x,labels=names(x),col.axis="red",las=3)#
            }#
#
            if (!onePlotFlag) dev.off()#
        }#
    }#
#
    ## --------------#
    ## RMSE#
#
    if (respType=="") {#
        figNoThis=figNoThis+1#
        fName=paste0("predictionPerformance_rmse_",respVarName,respType,variables,fileNameSuffix)#
        if (figNoFlag) fName=paste0("fig",figNoThis,"_",fName)#
        if (!onePlotFlag) {#
            switch(outputFormat,#
                "pdf"={#
                    #pdf(paste0(fName,".pdf"))#
                    pdf(paste0(fName,".pdf"),width=1*7,height=length(predMethodVec)*7/4)#
                },#
                "png"={#
                    if (onePlotFlag) {png(paste0(fName,"_%1d.png"),res=200,width=4*480,height=4*480)#
                    } else {png(paste0(fName,".png"),res=200,width=4*480,height=length(predMethodVec)*480)}#
                }#
            )#
        }#
        #par(mar=c(5, 4, 4, 2) + 0.1)#
        par(mar=c(6, 5, 2, .5) + 0.1)#
        if (onePlotFlag) par(mfrow=c(4,1)) else par(mfrow=c(length(predMethodVec),1))#
#
        lim=NULL#
        lim=c()#
        for (predMethod in predMethodVec) {#
            fName1=predMethod#
            #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
            load(paste(dirScratch,"res_",respVarName,respType,"_",fName1,".RData",sep=""))#
            lim=c(lim,res$repLevelInfo$rmse)#
            #cat(predMethod," ",length(res$rmse)/10,"\n")#
        }#
        lim=c(range(lim,na.rm=T))#
        lim#
        lim=c(0,2)#
        lim=c(1,2.5)#
        lim=c(1.4,2.3)#
        lim=c(1.6,2.4)#
#
        if (variables%in%c(candGene)) {#
            lim=c(2.0,2.8)#
        }#
        nBr=1000#
    }#
#
    tmp=vector(mode="numeric",length=length(predMethodVec)+1)#
    tmp=rep(NA,length(predMethodVec)+1)#
    tmpC=vector(mode="character",length=length(predMethodVec)+1)#
    tbl=data.frame(method=tmpC,noOfRep=tmp,mean=tmp,sd=tmp,mean_rmse=tmp,perc2.5_rmse=tmp,perc97.5_rmse=tmp,stringsAsFactors=F)#
    names(tbl)=c("method","noOfRep",paste0(c("mean","sd"),"_",respVarName),"mean_rmse","perc2.5_rmse","perc97.5_rmse")#
#
    load(paste0(dirScratch,"res_",respVarName,respType,"_",predMethodVec[1],".RData"))#
    if ("acc"%in%names(res$repLevelInfo)) {#
        tbl2=data.frame(mean_acc=tmp,perc2.5_acc=tmp,perc97.5_acc=tmp,stringsAsFactors=F)#
        names(tbl2)=c("mean_acc","perc2.5_acc","perc97.5_acc")#
    }#
#
    pId2=1#
    tbl$method[pId2]="observed"#
    tbl[pId2,paste0("mean_",respVarName)]=mean(training[,respVarName],na.rm=T)#
    tbl[pId2,paste0("sd_",respVarName)]=sd(training[,respVarName],na.rm=T)#
    for (pId in 1:length(predMethodVec)) {#
        pId2=pId+1#
        predMethod=predMethodVec[pId]#
        fName1=predMethod#
        #if (length(grep("null",fName1))==1) fName1=sub(variables,"",fName1)#
        load(paste0(dirScratch,"res_",respVarName,respType,"_",fName1,".RData"))#
        load(paste0(dirScratch,"pred_",respVarName,respType,"_",fName1,".RData"))#
        dat=apply(pred,1,mean,na.rm=T)#
        tbl$method[pId2]=predMethod#
        tbl[pId2,paste0("mean_",respVarName)]=mean(dat,na.rm=T)#
        tbl[pId2,paste0("sd_",respVarName)]=sd(dat,na.rm=T)#
        tbl$noOfRep[pId2]=nrow(res$repLevelInfo)#
        tbl$mean_rmse[pId2]=mean(res$repLevelInfo$rmse)#
        tbl$perc2.5_rmse[pId2]=quantile(res$repLevelInfo$rmse,probs=0.025,na.rm=T)#
        tbl$perc97.5_rmse[pId2]=quantile(res$repLevelInfo$rmse,probs=0.975,na.rm=T)#
        if ("acc"%in%names(res$repLevelInfo)) {#
            tbl2$mean_acc[pId2]=mean(res$repLevelInfo$acc)#
            tbl2$perc2.5_acc[pId2]=quantile(res$repLevelInfo$acc,probs=0.025,na.rm=T)#
            tbl2$perc97.5_acc[pId2]=quantile(res$repLevelInfo$acc,probs=0.975,na.rm=T)#
        }#
        if (respType=="") {#
            xlab="RMSE"#
            xlab=ifelse(pId==length(predMethodVec),"RMSE","")#
            if (dispNoOfRepFlag) {#
                header=paste0(variablesNameShort,": ",res$methodNameShort,", no. of reps ",nrow(res$repLevelInfo))#
            } else {#
                #header=paste0(variablesNameShort,": ",res$methodNameShort)#
                header=capWords(paste0(res$methodNameShort))#
            }#
            if ((length(grep("_rf",predMethod))==1 & length(grep("_rf",predMethodVec))>1) | (length(grep("_svmPoly",predMethod))==1 & length(grep("_svmPoly",predMethodVec))>1) | (length(grep("_lasso",predMethod))==1 & length(grep("_lasso",predMethodVec))>1) | (length(grep("_enet",predMethod))==1 & length(grep("_enet",predMethodVec))>1)) {#
                if (length(grep("_rf",predMethod))==1) {x=paste0("=p/",round((ncol(training)-1)/res$bestTune))} else {x=res$bestTune}#
                header=paste(header," ",paste0(paste0(names(res$bestTune),x),collapse=","))#
            }#
            if (is.null(lim)) {#
                hist(res$repLevelInfo$rmse,main=header,xlab=xlab,ylab="Count",breaks=nBr,cex.main=parThis$cex.main,cex.lab=parThis$cex.lab,cex.axis=parThis$cex.axis)#
            } else {#
                hist(res$repLevelInfo$rmse,xlim=lim,main=header,xlab=xlab,ylab="Count",breaks=nBr,cex.main=parThis$cex.main,cex.lab=parThis$cex.lab,cex.axis=parThis$cex.axis)#
            }#
            x=c(tbl$mean_rmse[pId2],tbl$perc2.5_rmse[pId2],tbl$perc97.5_rmse[pId2])#
            names(x)=c("mean","2.5%","97.5%")#
            x=x[1]#
            abline(v=x,lty="dashed",col="red")#
            axis(side=1,at=x,labels=names(x),col.axis="red",las=3)#
        }#
    }#
    #for (k in 1:ncol(tbl)) if (is.numeric(tbl[,k])) tbl[,k]=round(tbl[,k],2)#
    k=which.min(tbl$mean_rmse)#
    x=strsplit(tbl$method[k],"_")[[1]]#
    predMethodBest=x[2]#
    if (predMethodBest=="lm" & sub("_","",filtFlag)%in%x) predMethodBest=paste0(predMethodBest,filtFlag)#
    nm=c(names(tbl),paste0("mean_rmse_proportionGreaterWRT",x[2]))#
    x1=rep(NA,nrow(tbl))#
    for (i in 1:nrow(tbl)) {x1[i]=(tbl$mean_rmse[i]-tbl$mean_rmse[k])/tbl$mean_rmse[k]}#
    #x1=round(x1,2)#
    tbl=cbind(tbl,x1)#
    names(tbl)=nm#
    if ("acc"%in%names(res$repLevelInfo)) {#
        k=which.max(tbl2$mean_acc)#
        x=strsplit(tbl$method[k],"_")[[1]]#
        predMethodBest=x[2]#
        if (predMethodBest=="lm" & sub("_","",filtFlag)%in%x) predMethodBest=paste0(predMethodBest,filtFlag)#
        nm=c(names(tbl),names(tbl2),paste0("mean_acc_proportionGreaterWRT",x[2]))#
        x1=rep(NA,nrow(tbl2))#
        for (i in 1:nrow(tbl2)) {x1[i]=(tbl2$mean_acc[k]-tbl2$mean_acc[i])/tbl2$mean_acc[k]}#
        tbl=cbind(tbl,tbl2,x1)#
        names(tbl)=nm#
        rm(tbl2)#
    }#
    for (k in 2:ncol(tbl)) {tbl[,k]=round(tbl[,k],3)}#
    #tbl=tbl[,c("method","noOfRep",paste0(c("mean","sd"),"_",respVarName),"mean_rmse","perc2.5_rmse","perc97.5_rmse")]#
    write.table(tbl,file=paste0("prediction_",respVarName,respType,variables,fileNameSuffix,".txt"),col.names=T,row.names=F, sep="\t",quote=F)#
#
    if (respType=="") {if (!onePlotFlag) dev.off()}#
#
    }}
(10^6)/26
100000*70
71000*70
41*80
41*80/.1
41*80/.01
365*5
install.packages("keras")
library(keras)
install_tensorflow()
keras::install_keras()
library(keras)
library(edgeR)
library(readxl)
library(limma)
library(qvalue)
library(biomaRt)
library(marray)
library(RColorBrewer)
grep require *.R
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
library(org.Hs.eg.db)
library(biomaRt)
library(keras)
?keras
#####################################################################
#####################################################################
source("../src/process_data.R")#
source("../src/filter_data.R")#
source("../src/create_heatmap.R")#
source("../src/rank_SNPs.R")#
source("../src/heatmapRelated.R")#
#
#####################################################################
## Parameters#
#
exptName="mpal3"#
hashNames=c("CD45.26","CD45.27","CD45.28")#
#
exptName="mpal3"#
#
dirData="../data/"#
load(paste0(dirData,"m.int.",exptName,".RData"))#
load(paste0(dirData,"cell_barcode_",exptName,".RData"))#
datObj=process_data(mutation=mmpalDat.int,annSNP=annSNP,annCell=annCell)#
#
#datObj=impute_data(datObj=datObj)#
load(paste0(dirData,"m.int.filt.imp.",exptName,".RData"))#
load(paste0(dirData,"cell_barcode_",exptName,".RData"))#
datObj=list(mutation=mmpalDat.int.filt.imp,annSNP=annSNP,annCell=annCell)#
#
datObj=rank_SNPs(datObj0,col_anno_var=hashNames,hashColors=c("green3","indianred2","dodgerblue3"))
?rect
setwd("/Users/royr/UCSF/singleCell/Dab-seq/example")#
#####################################################################
#####################################################################
source("../src/heatmapRelated.R")#
source("../src/processData.R")#
source("../src/getRankedSNPs.R")#
source("../src/getBestSNPs.R")#
source("../src/hashCall.R")#
source("../src/createHeatmap.R")#
#
#####################################################################
## Parameters#
#
verbose=T#
#
exptName="mpal3"#
hashNames=c("CD45.26","CD45.27","CD45.28")#
#
hashColors=c("green3","indianred2","dodgerblue3")#
#
pvSnpThres=0.05 ## P-value for selecting best SNPs#
#####################################################################
dirData="../data/"#
load("example.RData")#
#
snacsObj=createSNACSobject(mut=mutMat,annSNP=annSNP,annCell=annCell,exptName=exptName,hashNames=hashNames,hashColors=hashColors)#
snacsObj=imputeMissingMutations(snacsObj=snacsObj,verbose=verbose)#
#
## ------------------------------#
## Cluster data to rank and select best SNPs#
#
snacsObj=getRankedSNPs(snacsObj,col_anno_var=snacsObj$annHash$hashNames)#
snacsObj=getBestSNPs(snacsObj,col_anno_var=c(snacsObj$annHash$hashNames,"clustRankedSNPs_hclust"),pvSnpThres=pvSnpThres)#
#
## ------------------------------#
## Make hash calls#
#
## Parameters for making hash calls#
prob_ecdf=0.95#
propAboveBackground=0.5#
probBackgndPeak=0.6#
probBelowForeground=0.75#
#
generateHashDensityPlot(snacsObj,prob_ecdf=prob_ecdf,probBackgndPeak=probBackgndPeak)#
snacsObj=makeHashCall(snacsObj,prob_ecdf=prob_ecdf,probBackgndPeak=probBackgndPeak,probBelowForeground=probBelowForeground,propAboveBackground=propAboveBackground,minClustSize=500,clustComparePValue=10^-5)#
#
## ------------------------------#
#
## Create pretty heatmap#
#
clustObj=createHeatmap(snacsObj,col_anno_var=c(snacsObj$annHash$hashNames,"hashCall","clustRankedSNPs_hclust"),col_anno_name=c(snacsObj$annHash$hashNames,"hash","rankedSNPsCluster"),col_dend=T,row_dend=F,outputfileName="heatmap_pvBestWithAnn")
